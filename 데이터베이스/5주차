12장 sql문 이용해서 중간고사 연습 

- 식별자 
  - 슈퍼 식별자 ( super key ) 
  - 후보 식별자 ( 후보 키 ) 
  - 주 식별자 ( Primary Key ) 
    - 여러 후보 키 중 하나를 선정하여 대표로삼는 키 
    - 유일하게 식별하는데 가장 적합한 것 
  - 부 식별자 ( 후보 키 ) 
    - 후보 식별자 가운데 주 식별자로 선택되지 않은 식별자 
  - 대리 식별자 
  - 역 엔트리 
    - 자주 접근하는 속성을 역 엔트리로 설정 
    - 역 엔트리 속성이 반드시 유일할 필요는 없음 
  - 외래키
    - 다른 릴레이션의 기본키를 참조하는 속성 
    - 릴레이션 간의 관계를 표현함 
    
    - 특징 
      - 다른 릴레이션의 기본키를 참조하는 속성임 
      - 참조하고(외래키), 참조되는(기본키) 양쪽 릴레이션의 도메인은 서로 같아야 함 
      - null 값과 중복 값 등이 허용 됨 
      - 외래키가 기본키의 일부가 될 수 있음 
      
- 식별자 크기 
  - 기본키 < 대체키 < 후보키 < 슈퍼키 

- 식별자 선정 규칙 
  - 시간에 따라 값이 변하지 않는 후보키 
  - 단일 속성으로 된 대리키의 사용을 고려 
  
- 약한 개체 타입 
  - 약한 개체 타입은 독립적은 키로는 존재할 수 없다.
  - 상위 개체타입이 결정되지 않으면 개별 개체를 식별할 수 없는 종속된 개체 타입
  - 의존적인 관계 ( 부모(강한개체)가 꼭 있어야 함)
  - 약한 개체의 기본키는 점선으로 표시 
  
- IE 표기법
  - ER 다이어그램을 더 축약하여 쉽게 표현 
  - 개체 타입과 속성은 직사각형으로 표현 
  - 관계 표기 
    - 점선 : 강한개체 타입 ( 비식별자 관계 )
    - 실선 : 약한개체 타입 ( 식별자 관계 ( 부모가 있어야함 ))
    - 실선에 여러갈래 : 일대다 관계 N쪽으로 여러갈래 표시 
    - 실선에 원 : 선택 참여, 최소 참여가 0일 경우 
    - 실선에 선 : 필수 참여, 최소 참여가 1일 경우 
    
- 무결성 제약조건 
  - 데이터베이스에 저장된 데이터의 일관성과 정확성을 지키는 것 
  
- 도메인 제약조건 
  - 각 애트리뷰트 값이 반드시 원자값이어야 함 
  - Check 제약 조건을 통해 값들의 범위를 제한할 수 있음 
  
- 개체 무결성 제약조건 
  - 기본키 무결성 제약조건 ( 기본키는 중복된 값이 존재해서는 안됨 ) 
  - 기본키는 null 값을 가지면 안됨 
  - 릴레이션 내에 오직 하나 값만 존재해야 한다는 조건 

- 참조 무결성 제약조건 
  - 외래 키 무결성 제약조건 
  - 연관된 튜플들 사이의 일관성을 유지하는데 사용됨 
  
  
  
  
  -- 6.조인
---------------------------------------------------
-- 6.1 Employees와 Department의 카티션프로덕트
---------------------------------------------------
select  * 
from    Employees E, Departments  D ;

---------------------------------------------------

-- 6.2 동등조인(내부조인)
-- 6.2 Employees와 Department의 동등조인(내부조인)
select  *
from    Employees, Departments
where   Employees.department_id = Departments.department_id;

select  *
from    Employees
where   department_id is null;

---------------------------------------------------
--6.2.1 Employees에서 부서명과 사원이름을  조회하시오.
--      부서명, 사원이름 순서로 조회
---------------------------------------------------
select  D.department_name as 부서명, 
        E.first_name || ' ' || E.last_name as 사원이름 
from    Employees E, Departments D
where   E.department_id = D.department_id;


select  D.department_name as 부서명, 
        E.first_name || ' ' || E.last_name as 사원이름 
from    Employees E inner join Departments D on E.department_id = D.department_id;

---------------------------------------------------

---------------------------------------------------
--6.2.2 Employees에서 department_id가 80번인 부서의
--      소속 직원의 사원이름과 부서명을 조회하시오.
---------------------------------------------------
select  D.department_name as 부서명, 
        E.first_name || ' ' || E.last_name as 사원이름 
from    Employees E, Departments D
where   E.department_id = D.department_id and E.department_id = 80;

select  E.first_name || ' ' || E.last_name as 사원이름, 
        D.department_name as 부서명
from    Employees E inner join Departments D on E.department_id = D.department_id
where   E.department_id = 80;
---------------------------------------------------

---------------------------------------------------
--6.2.3 각 부서의 부서명과 부서의 소재지를 조회하시오.
-- 부서명     소재지
-- IT        Southlake
---------------------------------------------------
select  D.department_name as 부서명,
        L.city as 소재지
from    Departments D, Locations L
where   D.location_id = L.location_id;
---------------------------------------------------

---------------------------------------------------
--6.2.4 사원의 사원ID와 이름, 소속 부서명과 부서의 소재지를 조회하시오.
---------------------------------------------------
select  E.employee_id as 사원ID,
        E.first_name || ' ' || E.last_name as 사원이름,
        D.department_name as 부서명,
        L.city as 소재지
from    employees E, departments D, Locations L
where   (E.department_id = D.department_id) and (D.location_id = L.location_id);

---------------------------------------------------

---------------------------------------------------
--6.2.5 부서의 소재지명(city)와 국가명(country_name)을 조회하시오.
-- 조회형태
--  부서ID    부서명           소재지      국가명       
--     40	Human Resources	London	United Kingdom	
---------------------------------------------------
select  D.department_id as 부서ID,
        D.department_name as 부서명,
        L.city as 소재지,
        C.country_name as 국가명
from    departments D, Locations L ,countries C
where   (D.location_id = L.location_id) and L.country_id = C.country_id
order by 부서ID;

---------------------------------------------------

---------------------------------------------------
--6.2.6 부서의 소재지명(city)와 국가명(country_name), 지역명을 조회하시오.
-- 조회형태
--  부서ID    부서명           소재지      국가명       지역명
--     40	Human Resources	London	United Kingdom	Europe
---------------------------------------------------
select  D.department_name,
        L.city,
        C.country_name,
        R.region_name
from    departments D, Locations L ,countries C, regions R
where   D.location_id = L.location_id 
and     L.country_id = C.country_id
and     C.region_id = R.region_id;

---------------------------------------------------


---------------------------------------------------
-- 6.3 외부조인
-- 6.3.1 조인된 건수
---------------------------------------------------

-- department_id가 NULL인경우
select  * 
from    employees
where   department_id is null;

---------------------------------------------------

---------------------------------------------------
--LEFT OUTER JOIN 
-- 예제 6.3.2 모든 사원의 사번, 이름, 부서명을 조회하시오.
---------------------------------------------------
select  E.employee_id as 사번,
        E.first_name || ' ' || E.last_name as 사원이름,
        D.department_name as 부서명
from    employees E, departments D
where   E.department_id = D.department_id(+)
order by E.employee_id;
-- left join
select  E.employee_id as 사번,
        E.first_name || ' ' || E.last_name as 사원이름,
        D.department_name as 부서명
from    employees E left outer join departments D 
        on E.department_id = D.department_id
order by E.employee_id;
---------------------------------------------------

---------------------------------------------------
-- RIGHT OUTER JOIN
-- 예제 6.3.2 모든 부서의 소속된 사원의 사번, 이름, 부서명을 조회하시오.
---------------------------------------------------

select  E.employee_id as 사번,
        E.first_name || ' ' || E.last_name as 사원이름,
        D.department_name as 부서명
from    employees E, departments D
where   E.department_id(+) = D.department_id
order by E.employee_id;
-- right out join 
select  E.employee_id as 사번,
        E.first_name || ' ' || E.last_name as 사원이름,
        D.department_name as 부서명
from    employees E right outer join departments D 
        on E.department_id = D.department_id
order by E.employee_id;
---------------------------------------------------

---------------------------------------------------
-- 6.4 : Self Join
-- 예제 6.4.1 모든 사원에 대하여 사원의 이름과 직속상사의 이름을 조회하시오.
---------------------------------------------------
select  E.first_name || ' ' || E.last_name as 이름,
        M.first_name || ' ' || M.last_name as 직속상사이름
from    employees E , employees M
where   E.manager_id = M.manager_id;





---------------------------------------------------

-- Quiz 6. 조인과 집합연산
--------------------------------------------------------------------------------
-- Quiz 6.1 모든 사원의 이름과 직무명을 조회하시오.
--      직무명, 사원이름 순서로 조회
--   직무명     사원이름
--  Accountant	Chen John
--------------------------------------------------------------------------------
select  J.job_title as 직무명, 
        E.last_name || ' ' ||  E.first_name as 사원이름
from    jobs J, Employees E
where   J.job_id = E.job_id
order by 직무명, 사원이름;
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Quiz 6.2 직무별 직무를 맡고있는 사원수를 조회하시오.
--      직무명 순서로 조회
-- 조회형태
--   직무명     사원수
--  Accountant	5
--------------------------------------------------------------------------------
select *
from Employees
where job_id is null;

select  J.job_title as 직무명, count(*) as 사원수
from    jobs J, Employees E 
where   J.job_id = E.job_id
group by J.job_title
order by 직무명;
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Quiz 6.3 직무별 직무를 맡고있는 사원수가 10명이상인 직무의 사원수를 조회하시오.
--      직무명 순서로 조회
-- 조회형태
--   직무명     사원수
--  Accountant	5
--------------------------------------------------------------------------------
select  J.job_title as 직무명, count(*) as 사원수
from    jobs J, Employees E 
where   J.job_id = E.job_id
group by J.job_title
having count(*) >= 10
order by 직무명;
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Quiz 6.4 모든 사원의 사번, 사원명, 부서명, 직무명을 조회하시오.
--         부서명, 직무명, 사원번호 순서로 조회
-- 조회형태
--   부서명     직무명    사원번호  사원명
--  Finance	Accountant	  111	Sciarra Ismael
--------------------------------------------------------------------------------
select  d.department_name as 부서명,
        J.job_title as 직무명,
        E.employee_id as 사원번호,
        E.last_name || ' ' || E.first_name as 사원명 
from    departments D, jobs J, employees E
where   D.department_id =  E.department_id and E.job_id = J.job_id;
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Quiz 6.5 사번 101, 176번인 사원의 직무이력을 조회하시오.
-- 조회항목 : 사번, 사원명, 부서명, 직무명, 시작일자, 종료일자
-- 조회형태
--  사번     사원명          부서명         직무명            시작일자    종료일자
--  101	Kochhar Neena	Accounting	Accounting Manager	2001-10-28	2005-03-15
--------------------------------------------------------------------------------
select  E.employee_id as 사번,
        E.last_name || ' ' || E.first_name as 사원명,
        D.department_name as 부서명,
        J.job_title as 직무명,
        To_char(H.start_date, 'YYYY-MM-DD') as 시작일자,
        To_char(H.end_date, 'YYYY-MM-DD') as 종료일자
from    employees E, departments D, jobs J, job_history H
where   D.department_id =  E.department_id 
and     E.employee_id in (101, 176)
and     E.job_id = J.job_id 
and     E.employee_id = H.employee_id
order by E.employee_id, 시작일자 DESC;
--------------------------------------------------------------------------------
  
  
