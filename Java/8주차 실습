package project_1103;

public class Circle {
	
	int radius;
	String name;
	
	// 내부에 아무것도 없으면 디폴트생성자라고 한다. 
	public Circle() {
		//this.radius = 1;
		//this.name = " ";
		//this(1, " "); 		// this() 로 다른 생성자 호출 
								// 위에 두줄 보다 아래 한줄이 유지보수가 더 좋다. 
								// 이렇게 쓰는 법을 연습하자. 
		
		this(1);				// 매개변수하나의 생성자를 이용하여 생성 
	}
	
	public Circle(int radius) {
		//this.radius = radius;
		//this.name = " ";
		this(radius, " ");	//  this() 호출자를 사용하여 변경해봄  
	}
	
	public Circle(int radius, String name) {
		this.radius = radius;
		this.name = name;
	}
	
	public double getArea() {
		return 3.14 * radius * radius;
	}
	
	public static void main(String[] args) {
		Circle pizza = new Circle(10, "자바피자");
		System.out.println(pizza.name + " 의 면적은 " + pizza.getArea());
		
		Circle donut = new Circle();
		donut.name = "도넛피자";
		System.out.println(donut.name + " 의 면적은 " + donut.getArea());
		
		Circle c = new Circle(100, "원");
		//==================================================================//
		// 객체 배열에 대한 레퍼런스 변수 선언 및 
		// 레퍼런스 배열 생성 
		Circle[] cArr = new Circle[5];
		
		// 각 원소의 객체 생성 
		for ( int i = 0; i < cArr.length; i++) 
			cArr[i] = new Circle((i+1) * 10);
		
		// 각 원소의  값을 출력 
		// foreach 문으로 출력 
		for(Circle d: cArr) {
			System.out.println(d.getArea());
		}
		
		
	}
}





// 예제 2번 
// this(w, 2);
// this(1, 2); 		->       this(1);


// 예제 3번
// 
//====================================================================================================================================//
package project_1103;

public class Call_by_value {

	static int increase(int m) {
		m = m + 1;
		System.out.println("M = " + m);
		return m;
	}
	
	public static void main(String[] args) {
		int n = 10;
		
		int a = increase(n);
		
		// call by value 
		// 호출자가 건네는 값이 매개변수에 복사되어 전달.
		// 실제 값은 변하지 않음 
		System.out.println("N = " + n);
		
		// call by reference
		// 실제값이 변환 되어 반환 됨 
		System.out.println("A = " + a);
	}

}
//====================================================================================================================================//
package project_1103;

public class Callbyreference {

	static void increase(Circle m) {
		m.radius++;
	}
	
	public static void main(String[] args) {
		Circle pizza = new Circle(10);
		// 레퍼런스 데이터 타입이 전달이 되면 callbyreference의 형태가 나타남 
		increase(pizza);
		
		System.out.println(pizza.radius);
	}
}
//====================================================================================================================================//
package project_1103;

public class ArrayPassing {

	static void increase(int[] array) {
		for (int i=0; i< array.length; i++) {
			array[i]++;
		}
	}
	
	public static void main(String[] args) {
		int[] a = {1,2,3,4,5};
		increase(a);

		for (int i=0; i<a.length;i++) {
			System.out.print(a[i] + " ");
		}
	}
}


