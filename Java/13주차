★★★★★★★6장 p.38 가장 중요★★★★★★★
- 가장 기본적인 업.다운 캐스팅 
- equals() 작성 

==============================================================
매개변수가 Object 타입 
- 최상위 클래스인 Object 타입으로 매개변수를 선언시 
- 어떠한 매개변수가 와도 다 받겠다는 의미 

Wrapper 객체 생성 
- 기본 타입의 값으로 Wrapper 객체 생성 
  - Integer i = Integer.valueOf(10);
  - Character c = Character.valueOf('c');
  - Double f = Double.valueOf(3.14);
  - Boolean b = Boolean.valueOf(true);
  
- 문자열로 Wrapper 객체 생성 
  - Integer I = Integer.valueOf("10");
  - Double d = Double.valueOf("3.14");
  - Boolean b = Boolean.valueOf("false");
  
- Wrapper 클래스에서 
  - Integer를 가장 중요하게 생각하고 외우자.
  
- 반드시 외워야 하는 것 
- intvalue() 
- static int parseInt(String s)

==============================================================
박싱 과 언박싱 

박싱 
- 기본 타입의 값을 Wrapper 객체로 변환하는 것 

언박싱 
- Wrapper 객체에 들어 있는 객체로 변환하는 것 
- 박싱의 반대 

자바에서는 박싱과 언박시을 자동으로 해준다.

================================================================
★★★문자열은 한번 선언되면 수정이 불가능 하다. 

스트링 리터럴 
- 자바 가상 머신 내부에서 리터럴 테이블에 저장되고 관리됨 
- 메모리를 더 아낄수 있다. 

new String() 
- new String()으로 문자열을 생성 
- 힙영역에 데이터 저장 
- 스트링 리터럴 보다 메모리를 많이 차지함 
================================================================

★★★★★★★스트링 객체 주요메소드 ★★★★★★★
- 6장 PPT p.51 너무 중요함 
================================================================

컬렉션
- 컬렉션은 객체만 넣을 수 있다. 
- 고정 크기를 갖는 배열의 단점 개선 
- 객체들을 쉽게 삽입, 삭제, 검색할 수 있는 가변 크기의 컨테이너 

제네릭 
- 특정 타입만 다루지 않고, 여러 종류의 타입으로 변환할 수 있도록 클래스나 메소드를 일반화 시키는 기법 
- C++의 템플릿 , C#의 형식매개변수 T와 같음 


벡터
- 배열의 단점을 극복 
- 배열의 길이 제한 극복 
- 요소의 개수가 넘치면 자동으로 길이 조절 
- 삽입, 삭제에 따라 자동으로 요소들의 자리를 이동 


벡터 사용법 
- Vector<Integer> v = new Vector<Integer>();

- 벡터는 객체만 다룰 수 있다.
- 벡터는 NULL도 사용할 수 있다. 
- < > 안에는 기본 데이터형이 올 수 없다. ( int, char, double, float 등 ) 
- String 사용가능 

- 벡터에 값을 넣기위해서 add(데이터) 
- 벡터의 값을 빼기위해서 get(인덱스위치) 함수를 사용 

- PPT 7장 14페이지 외우기 
- boolean add ( E element )           : 맨뒤에 값 추가 
- void add ( int index, E element )   : 원하는 위치에 값추가 
- E elementAt(int index)              : index의 요소 리턴 
- E get(int index)                    : index의 요소 리턴 
- E remove(int index)                 : index의 요소 삭제 
- int size()                          : 벡터가 포함하는 요소의 개수 리턴 
- 단, 벡터는 size보다 큰 값을 삽입할 경우 오류가 발생 
ex) size가 4 (0,1,2,3 해서 4개) 인데  5번째에 값을 넣으라고 하면 오류발생 왜냐? size보다 크기 때문에 


- 벡터의 활용 
- PPT 7장 15페이지 확인 


ArrayList<E>
- 가변 크기 배열을 구현한 클래스 
- ArrayList<String> al = new ArrayList<String>();
- 백터와 거의 동일 
- 벡터와 달리 스레드 동기화 기능 없음 
- Array는 여러 사람이 동시에 같이 사용할 수 있음 ( 동기화가 없음 ) 
- vector는 여러사람이 동시에 같이 사용하지 못하고 하나가 접근시 다른건 기다려야함 ( 동기화가 있음 ) 


- 몇번 돌지 예측이 불가능할 때 vector 또는 ArrayList를 쓰는것이 좋다.



- Iterator
- Set집합 기억해두기 
- set은 순서가 없음 
- 순서가 없는 집합네서 요소에 접근하기 위해서 Iterator를 사용한다. 
- .hasNext() => 모든 요소를 접근하는 함수 => Iterator를 사용할 때 씀 


HashMap
- 제네릭이 두개다 
- K : 키로 사용할 요소의 타입 
- V : 값으로 사용할 요소의 타입 
- 키와 값이 한 쌍으로 삽입 
- 값을 검색하기 위해서 반드시 '키' 이용





