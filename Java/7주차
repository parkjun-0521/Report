일반타입, 레퍼런스 타입의 차이 
- 일반 타입은 값을 넣을 수 있음 
- 레퍼런스타입은 값이 저장된 위치를 저장 

자바의 예외 클래스 
- NullPointerException 에러를 가장 많이 볼꺼임 
- InputMismatchException : Scanner 클래스의 에러로 다른 데이터 형의 자료를 넣었을 때 발생하는 에러 

예외 넘기기 - throws
- 예외를 발생시킨 실행문의 상위 코드 블록으로 예외 객체를 떠넘기기 
- 적절한 예외 핸들러를 만나 처리될 때 까지 계속 메소드 호출 역순으로 전당 
- main) 까지 가서도 핸들러를 찾지 못하면 프로그램 종료 

- 11/6 까지 제출 ( 23시 50분 까지 ) 
3장 125p
1,2,3,5,6,8,보너스1
3장 121p
open Challenge

===========================================================================================================
- 4,5장 시험 중점 
- 4장 클래스와 객체 

★객체
- 실세계의 객체는 객체마다 고유한 특성(property)과 행동(behavior)을 가짐 
- 객체끼리는 메시지를 통해 서로 상호작용을 하여 작업을 처리 

★객체지향 특성 ( 3가지 요소를 가지고 있어야 한다 ) 
- 캡슐화 
- 상속 
- 다형성 

★캡슐화 
- 객체를 캡슐로 싸서 내부를 볼 수 없게 하는 것 
- 객체의 가장 본질적인 특성 

- 클래스 : 객체의 모양을 선언한 틀 ( 캡슐화를 하는 틀 ) 
- 객체   : 클래스로 만들어진 실체 

- 멤버변수 , 필드 ( 자바에서는 필드라고 많이 씀 ) 
- 멤버함수 , 메소드 ( 자바에서는 메소드라고 많이 씀 )

★상속 
- 상위개체 속성이 하위개체에 물려짐 
- 하위개체가 상위개체의 속성을 모두 가짐 

- extends 를 사용한다. 

★다형성
- 같은 이름의 메소드 클래스 혹은 객체에따라 다르게 구현되는 것 
- 오버로딩이 발생 ( 함수 중복 ) 

★오버로딩과 오버라이딩 
- 상속에서 발생하는 다형성을 ' 메소드 오버라이딩 ' 이라고 한다.
- ' 메소드 오버로딩 ' 상속과 관련 없이 한 클래스 내에서 발생 

---객체 지향 언어  목적--- 
★ 소프트웨어의 생산성 향상 
  ★ 상속, 다형성, 객체, 캡슐화 등 소프트웨어 재사용을 위한 여러 장치 내장 
  ★ 재사용과 부분수정이 빠름 
  - 다시 만드는 부담을 대폭 줄임 
  - 생산성 향상 

★ 실세계에 대한 쉬운 모델링 
  - 초기 프로그래밍 : 처리과정, 계산절차 중요 
  
  - 현대 프로그래밍 : 실세계에서 발생하는 일을 프로그래밍 
                     실세계에서는 정차나 과정보다 물체들의 상호작용으로 묘사하는 것이 용이 
                     
  - 실세계의 일을 보다 쉽게 프로그래밍 하기 위한 객체 중심적 언어 

절차 지향 과 객체 지향 
- 절차지향 
  - 작업 순서를 표현하는 컴퓨터 명령 집합 
  - 함수들의 집합으로 프로그램 작성 
  
- 객체 지향 
  - 컴퓨터가 수행하는 작업을 객체들간의 상호 작용으로 표현 
  - 클래스 혹은 객체들의 집합으로 프로그램 작성 


★클래스 
- 객체의 속성과 행위를 선언 
- 클래스는 객체의 타입이다. 
- 속성 -> 멤버변수( 필드 )
- 행동 -> 멤버함수( 메소드 ) 

★객체 ( 인스턴스 ) 
- 클래스의 틀로 찍어낸 실체 
- 실체는 메모리를 가진다. 
- 메모리 공간을 갖는 구체적인 실체 
- '인스턴스'라고도 부름 => 실제 값  



자바의 클래스 
클래스 
- class 키워드로 선언 
- 클래스에 대한 접근지정자 class 클래스명 { 

  }
  
- public class Circle{  
    멤버변수 ( 필드 ) 
    멤버함수 ( 메소드 ) 
  }


객체  
- 레퍼런스 변수 선언
  - 클래스명 객체이름 
  - ex ) Circle pizza;
  
- 객체 생성
  - new 연산자 사용 
  - 메모리를 할당 받아 메모리에 대한 레퍼런스를 리턴함 
  
  - 객체명 = 예약어 생성자();
  - ex) pizza = new Circle();
  
- 객체 멤버 접근 
  - ( . ) 점 연산자 사용 
  - 객체명.변수또는함수 
  
  - ex ) pizza.radius = 10;
  - ex ) area = pizza.getArea(); 


★★★ ppt 4장 17, 19쪽 코드 보고 그림그리기 ★★★

시험 -> 객관식은 7문제 
        서술형 주관식 문제 1 => 자바의 특징 ( 플랫폼의 독립성 +> JVM, 바이트코드 가 있어서 독립성 가능 ) 
        나머지 모든 문제는 단답 








