// 자바는 C -> C++ -> Java 순으로 진화 했다. 
// 자바와 비주얼베이직 둘다의 영향을 받은게 C# 이다.

소스파일 : 프로그래밍 언어로 작성된 텍스트 파일 
컴파일 : 소스 파일을 컴퓨터가 이해할 수 있는 기계어로 만드는 과정 

- 소스파일 
  ● 자바 : .java
  ● C : .c
  ● C++ : .cpp 
  
- 컴파일 
  ● 자바 : .class
  ● C : .obj -> .exe
  ● C++ : .obj -> .exe

- 텍스트 파일 
  ● 메모장으로 열리면 대부분 텍스트 파일 이라고 한다
  ● 소스 파일은 대부분 텍스트 파일로 저장을 하여 메모장으로 여는것이 가능
  ● 소스 파일 

- 이진 파일 
  ● 소스파일을 컴파일 해서 만들어진 파일은 이진파일이다.
  ● 기계어로 적혀있다
  ● 컴파일 
  
★ 자바의 태동 
  ● 자바의 시작은 1991년 ( '제임스 고슬링' 이라는 분을 주측으로 해서 자바 시작 ) 
  ● 자바의 발표는 1995년 
  
  ★ 자바의 목적 
    1. 플랫폼 '호환성' 문제를 해결하기 위해서 개발 
      ● 자바 이전에 프로그램은 플랫폼에 종속적이다 
      ● 기존 언어로 작성된 프로그램은 PC, 유닉스, 메인 프레임 등 플랫폼 간에 호환성이 없음 
      ● 소스를 다시 컴파일 하거나 프로그램을 재작성해야 하는 단점 
      
    2. 플랫폼 '독립적인 언어' 개발
      ● 모든 플랫폼에서 호환성을 갖는 프로그래밍 언어 필요 
      ● 네트워크, 특히 웹에 최적화된 프로그래밍 언어의 필요성 대두 
      
    3. '메모리 사용량이 적고' 다양한 플랫폼을 가지는 '가전 제품'에 적용
      ● 내장형 시스템 요구 충족 
      ● 작은량의 메모리를 가지는 제어 장치 
    
  ● 초기 이름 : 오크 ( OAK ) 
  ● 2009년 오라클이 자바 라이센스를 가지고 있음 
  
- 기존 언어는 플랫폼 종속성이 존재 
  ● 리눅스에서 개발을 하면 리눅스에서 밖에 열리지 않음 
  ● 다른 플랫폼에서는 열리지 않음 ( 다른 플랫폼이라고 하면 PC, 메인 프레임 ) 
  ★ '플랫폼 = 하드웨어 + 운영체제' ( 핵심 중요 ) 
  - 프로그램의 플랫폼 호환성이 없는 이유 
    ● 기계어가 CUP마다 다름 
    ● 운영체제 마다 API가 다름 
    ● 운영체제마다 실행파일 형식이 다름 

- 자바의 플랫폼 독립성, WORA
  - WORA ( Write Once Run Anywhere ) 
    ★ 한번 작성되어 컴파일 된 자바 코드는 모든 플랫폼에서 '자바 가상 머신'만 있으면 바로 실행 가능 
    ● C / C++ 등 기존 언어가 가진 플랫폼 종속성 극복 
    ● 네트워크에 연결된 어느 클라이언트에서나 실행 가능 
    
  - WORA를 가능하게 하는 자바의 특징 
    ★ 바이트 코드 
      - 자바 소스코드를 컴파일 한 일종의 목적코드 ( 기계어 )   => 자바 가상 머신의 기계어 
      - 자바 가상 머신에서 실행가능한 바이너리 코드            => 바이너리 코드는 JVM이 컴파일 하는 코드이다 
        ● CPU에 종속적이지 않은 중립적인 코드 
        ● 바이트 코드는 CPU에 의해 직접 실행이 되지 않음 
        ● 자바 가상 머신이 작동중인 플랫폼에서 실행   
      - 클리스 파일에 저장 
      
    ★ JVM ( Java Virtual Machine ) 
      - 자바 가상 머신만 있으면 어디서든지 실행이 가능하다. 
      - 각기 다른 플랫폼에 설치 가능 
      - 동일한 자바 실행 환경 제공 
      ★ 자바 가상 머신 자체는 플랫폼에 종속적 
    
- JDK 와 JRE 
  ● JDK
    - 자바 개발 도구 ( 컴파일러 등 ) + JRE ( JVM + 자바 API)
    - 개발을 할때 필요한 도구
    - 컴파일러, 컴파일된 자바 API 클래스들이 들오 있는 모듈 파일들, 샘플 등 포함
    
  ● JRE ( Java Runtime Environment ) 
    - 자바 실행 환경 
    - JVM 포함 
    - 컴파일된 자바 APL 들이 들어 있는 모듈 파일 
    - 개발자가 아닌 경우, JRE만 필요하고 따로 다운받을 수 있음 


- 메모장 코딩 
public class Hello2030{
	public static void main(String[] args){
		int n = 2030;
		System.out.println("Hello" + n );
	}
}

1. 이것을 Hello2030.java로 저장 
2. cmd 창을 연다
3. Hello2030.java 저장 폴더로 이동 
4. javac Hello2030.java 를 하여 class 파일을 만듬 
5. dir Hello.* 로 Hello로 시작하는 파일을 검색해 class 파일이 있는지 확인 
6. java Hello2030 으로 자바 결과 실행 
7. 6번이 오류시 java -classpath . Hello2030 으로 실행 



- 자바 모듈화 
	- 모듈 : 자바 패키지들과 이미지, XML 파일 등의 자원을 묶은 단위 
	- 모듈 프로그래밍 : 자바 응용프로그램을 마치 직소퍼즐을 연결하듯이 필요한 모듈을 연결하는 방식으로 작성 
	
- 자바 모듈화 목적
	- 작은 크기의 실행 환경 구성 
	- 하드웨어가 열악한 소형 IOT 장치 지원 
	- 세밀한 모듈화를 통해 자바 응용프로그램이 실행되는데 필요 없는 모듈을 배제하여 작은 크기로 배포하게 함 

- 자바 API 
	- JDk에 포함된 클래스 라이브러리 
	- 쉽고 빠르게 자바 프로그램을 개발 




