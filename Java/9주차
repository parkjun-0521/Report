가비지컬렉션 
- 자바 가상 머신이 가비지를 자동으로 수집, 반환 
  - 가용 메모리 공간이 일정이하로 부족해 질때 
  - 가비지를 수거하여 가용 메모리 공간으로 확보 

강제 가비지 컬렉션 수행 
- System 또는 Runtime 객체의 gc() 메소드 호출 

가비지 예외 
1)
int[] n = new int[10];
for ( int i = 0; i< 10; i++){
      Scanner s = new Scanner(System.in);           // 여기에서 가비지가 생성이됨 
                                                    // heap 영역에 지속적으로 남아 있는 '지역변수' 
                                                    // for문이 끝나고 나오면 s를 가리키는 것이 없어짐 
                                                    // 따라서 가비지가 생김 
                                                    // s는 for문 안에서만 사용 가능하다. 
                                                    // 10개의 객체들이 가비지가 된다.  
      n[i] = s.nextInt();
}

2)
int[] n = new int[10];
Scanner s = null;
for ( int i = 0; i< 10; i++){
      s = new Scanner(System.in);                   // 가장 마지막 9번째는 가비지가 발생하지 않음 
                                                    // 할당받은 9개의 객체들이 가비지가 됨 
      n[i] = s.nextInt();
}


가비지는 객체가 가비지가 되는 것 이다. 

==============================================================================================================

패키지 
- 유사한 클래스를 하나로 묶어놓은 것이 패키지 
★ 상호 관련이 있는 클래스 파일을 저장하여 관리하는 '디렉터리'
- 자바의 패키지는 디렉터리다.

접근지정자
- 자바의 접근지정자 
  - private, protected, public, 디폴드(패키지) 접근자. 

- 접근 지정자 목적 
  - 클리스나 일부 멤버를 공개하여 다른 클래스에서 접근하도록 허용 
  - 객체 지향 언어의 캡슐화 정책은 멤버를 보호하는 것 
  
- 접근지정자 공개 범위 
  - private : 외부로 부터 완벽히 차단 
  - 디폴트 : 같은 패키지 안에서는 접근 가능 
  - protected : 상속 관계에서 사용 가능 
  - public : 모든 클래스에 공개적으로 허용 
  
- 클래스를 선언 할 때는 public을 일반적으로 많이 쓴다. 



=====================================================
- 다른 패키지에 있는 변수를 쓰려면 import를 해줘야 한다. 

- 멤버를 선언할 때는 private이 기본이다. 
★ 멤버 변수는 기본값이있어서 초기화를 하지 않고 사용 가능  ( PPT 58쪽 확인 ) 
  - 58 쪽 ppt 에서 a는 에러가 뜨지 않는다, 하지만 b는 에러가 뜬다. 왜냐 a는 맴버변수, b는 지역변수이기 때문이다. 
  
- static 맴버 
  - static멤버는 클래스당 하나만 생성 
  - 객체들에 의해 공유됨 
  - 클래스 멤버라고 부름 
  - 한번 정해지면 바뀌지 않는다.

- non-static 맴버 생성 
  - 객체가 생성될 때 마다 객체마다 메모리가 잡혀서 공간을 차지 한다. 
  - instance 멤버라고 한다.
  - 프로그램이 종료될 때 사라짐 
  - 동일한 클래스의 모든 객체들에 의해 공유됨 
  
  
- static의 활용 
  - 전역 변수와 전역 함수를 만들 때 활용 
  - 응용프로그램을 작성 할 때, 모든 클래스에서 공유하는 전역 변수나 
    모든 클래스에서 호출할 수 있는 전역 함수를 만들고자 할 때 사용
    
  - 공유 멤버를 만들자고 할 때 
    - static으로 선언한 멤버는 클래스의 객체들 사이에 공유 

static 메소드의 제약 조건 
- static 메소드는 오직 static 멤버만 접근 가능 

- static 메소드는 this 사용 불가 

=====================================================================
과제 : 4장 실습 
p.184 ~ 1,2,3,5,6,보너스1, 오픈챌린지
