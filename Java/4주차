- perspective : 관점 
- 자바를 실행 시키기 위해서 자바가상머신이 필요 
- ~.java의 확장자를 가진 파일은 하나의 클래스가 포함되어야 한다.

- 자바의 클래스의 첫글자는 대문자.
- main class => 프로그램의 시작점.
- src 폴더 안에 .java 확장자를 가진 파일이 있다.
- bin 폴더 안에 .class 확장자를 가진 파일이 있다.
- 한 파일에는 publid class가 하나만 있어야 한다. 
- 자바는 문자를 사용할 때 유니코드(16비트)를 사용 


===============================================================

- java 
  ● 클래스
    - 클래스 코드는 { } 내에 모두 작성 
    - public 으로 선언하면 다른 클래스에서 접근 가능 
    - class 키워드로 클래스 선언 
    
  ● 주석문 
    - // 한 라인 주석 
    - /* */ 여러행 주석 
    
  ● main()
    - public static void으로 선언 
    - String[] args로 실행 인자를 전달 받음 
    
  ● 메소드 
    - C/C++에서의 함수를 메소드로 지칭
    - class 밖에 작성할 수 없음 
    
  ● 변수
    - 데이터를 저장하는 공간, 변수 타입과 변수 이름 선언
    - 메소드 내에서 선언된 변수는 지역변수 
  
  ● 문장 
    - ; 은 한 문장의 끝을 인식 
    
  ● 화면 출력 
    - 표준 출력 스트림에 메시지 출력 ( 표준 출력 => 모니터 출력 ) 
    - 여러 타입의 데이터 출력 가능 
    - println : 출력 후 줄바꿈 
    - print : 출력 후 줄바꿈을 하지 않음 
    
  ● 식별자 
    - 식별자란? 클래스, 변수, 상수, 메소드 등에 붙이는 이름 
    - 식별자 규칙 
      - @, #, ! 과 같은 특수문자, 공백 또는 탭은 식별자로 사용할 수 없음. 단, _ 와 $ 는 사용가능 
      - 유니코드 문자 사용가능, 한글 사용 가능 
      - 자바 언어의 키워드는 식별자로 사용불가 
      - 식별자의 첫 번째 문자로 숫자는 사용불가
      - 식별자의 첫 번째 문자로  _ 와 $ 를 사용할 수 있지만 일반적으로 잘 사용하지 않음
      - 불린 리터럴과 널 리터럴은 식별자로 사용불가
      - 길이 제한 없음 
    
   ● 대소문자 구별 
   
   ● 자바의 데이터 타입 
    - 기본타입 ( 8개 )
      - boolean : 1비트       : 논리 타입 
      - char    : 2바이트─    : 문자 타입
      - byte    : 1바이트─ ┐
      - short   : 2바이트  |  : 정수타입 
      - int     : 4바이트  |
      - long    : 8바이트─ ┘
      - float   : 4바이트─ ┐
                           |  : 실수 타입
      - double  : 8바이트─ ┘
    ★★ -레퍼런스 타입 ( 1개 )- ★★
      - 4가지 용도로 사용됨 
        - 클래스에 대한 레터런스
        - 인터페이스에 대한 레퍼런스
        - 배열에 대한 레퍼런스
        - 열거에 대한 레퍼런스 
  
    ● 문자열 
      - 문자열은 기본 타입이 아님 
      - String 클래스로 문자열 표현 
    
    
    ● 리터럴
      - 프로그램에서 직접 표현한 값 ( 데이터 그 자체 ) 
      
      - 정수, 실수, 문자, 논리, 문자열 리터럴 있음 
      - ex) int i = 20; 에서 20은 리터럴 
      - ex) a = '!' 에서 ! 는 리터럴 
      
      - 정수리터럴 
        - 10진수    : 15
        - 8진수(0)  : 015
        - 16진수(0x): 0x15
        - 2진수(0b) : 0b0101         
      - 정수 리터럴은 int형으로 컴파일 
      
      - long 타입 리터럴은 숫자 뒤에 L 또는 l을 붙여서 표시 
      - ex) long g = 24L;
      
      - 실수 리터럴 
        - 실수 타입 리터럴은 double 타입으로 컴파일 
        - 숫자 뒤에 f(float)나 d(double)를 명시적으로 붙이기도함 
        
      - 문자 리터럴 
        - 단일 인용부호(' ')로 문자 표현
        - 자바에서는 유니코드 자제로 문자를 표현할 수 있다.
        - 특수문자 리터럴은 백슬래시(\)로 시작 
          - \b : 백스페이스
          - \t : 탭 
          - \n : 줄바꿈 
          - \f : 폼피드
          - \" : 이중 인용부호
          - \' : 단일 인용부호
          - \\ : 백슬래시
      
      - 논리 타입 리터럴 
        - ture 또는 false 사용 
        - boolean 타입 변수에 치환하거나 조건문에 이용 
        - 자바에서는 c와 다르게 1,0을 참,거짓으로 사용 불가
        
      - null 리터럴 
        - 래퍼런스에 대입 사용 
        - ex) String str = null;
        
      - 문자열 리터럴 
        - 큰따옴표로 묶어서 표현 
        - 문자열 리터럴은 String 객체로 자동 처리 
        
    ● 상수 
      - 상수 선언 
        - final 키워드 사용 
        - 선언시 초기값 지정 
        - 실행 중 값 변경 불가 
        
        - ex ) final double PI = 3.141592;
        - 상수선언_데이터타입_상수이름_초기화 
        
        - 상수를 선언 할 때는 static과 자주 사용 
          - static을 붙이면 전역적으로 다 사용할 수 있도록 하는거다.
        
    ● var 키워드 
      - Java10 부터 도입 
      - 기존의 변수 선언 방식 : 변수의 타입 반드시 지정 
      - var 키워드 
        - 타입을 생략하고 변수 선언 가능 
        - 컴파일러가 추론하여 변수 타입 결정 
        - ex) var price = 200; 
        - 이때는 int형으로 자동으로 컴파일 한다.
        
      - 초기값이 무조건 정해져 있어야 한다. 
      - 지역 변수 선언에만 한정 
      
    ● 언어의 룰 (convention 룰)
      - 클래스 이름
        - 대문자로 시작 
        - 단어와 단어를 연결할 때, 연결하는 단어의 첫 문자를 대문자로 씀 
        
      - 변수명, 메소드 -> 카멜표기법
        - 소문자로시작 
        - 단어와 단어를 연결할 때, 연결하는 단어의 첫 문자를 대문자로 씀 
        - 낙타 등의 혹과 비슷해서 카멜표기법이라고 함 
        
      - 상수 
        - 대문자 사용 
        - 단어와 단어를 연결할 때는 언더바를 사용 
    
    ● 타입 변환 
      - 한 타입의 값을 다른 타입의 값으로 변환 
      - 자동 타입 변환 
        - 컴파일러에 의해 원래의 타입보다 큰 타입으로 자동 변환 
        - 치환문이나 수식 내에서 타입이 일치하지 않을 때 
        
      - 강제 타입 변환 
        - 개발자가 의도적 타입 변환 
        - ( ) 안에 개발자가 명시적으로 타입 변환 지정 
        
        - double d = 1.9;
        - int n = (int)d;
        - 결과 n은 1이 나온다.      
  
  
  
  
  
  
  
  
  
