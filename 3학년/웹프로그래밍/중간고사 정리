- 0404
- 배운데 까지 중간고사 정리 

- WWW
  - '팀 버너스 리'가 제안하여 개발된 정보 공유 방안 ( HTML, HTTP 통신 프로토콜 ) 
  - 전 세계를 연결한 거미줄과 같은 인터넷 말에서의 정보의 공유 
  
- 웹 구조 
  - 클라이언트-서버 구조 
  - 웹 브라우저가 있는 클라이언트가 자료를 요청하면, 웹 서버가 있는 서버는 요청에 응답 
  
- 웹 동작 
  - 요청 : 클라이언트에서 서버로 정보를 요구하기 위해 보내는 메시지 ( GET방식, POST 방식 ) 
  - 응답 : 요구된 메시지에 대한 응답 메시지 ( HTML, 이미지 등 )
  
- 웹 서버 
  - 웹 서버는 웹의 HTTP 프로토콜을 사용하여 클라이언트의 요청에 응답을 하는 프로그램 
  - 웹 서버 종류 ( 아파치, IIS, 톰캣 ) 
  
- 정적 웹 페이지 
  - 사용자가 웹 페이지를 요청했을 경우에 서버에 저장된 페이지를 그대로 클라이언트에게 제공 
  - 어떤 사용자라도 같은 내용의 페이지를 볼 수 있음 
  - 서버에 있는 문서가 수정되지 않는 한 항상 같은 웹 문서 응답 
  
- 동적 웹 페이지 
  - 사용자가 웹 페이지를 요청했을 경우 서버에서 실시간으로 해당 작업을 처리해 클라리언트에게 제공 
  - 사용자마다 각기 다른 내용의 페이지를 볼 수 있음 
  - 시시각각 변화하는 데이터를 반영하는 페이지 ( ASP, JSP, PHP등의 서버 스크립트 언어 사용 ) 
  
- 스크립트 
  - 서버 측 스크립트 
    - 웹 서버에서 실행 되는 스크립트로 서버 측에서 동적인 컨텐츠를 생성 ( ASP, JSP, PHP ) 
  - 클라이언트 측 스크립트 
    - 클라이언트인 사용자의 웹 브라우저에서 실행 ( Javascript, VBScript ) 
    
- 웹 어플리케이션 실행 순서 
  - 웹 브라우저는 웹 서버에 웹 페이지를 요청한다. 
  - 웹 서버는 웹 어플리케이션을 실행하여 그 결과를 웹 브라우저에 응답한다.
  - 웹 서버에서 웹 어플리케이션을 처리한다. ( PHP, ASP, JSP )
  - 웹 브라우저는 웹 서버로부터의 응답 결과를 출력한다. ( JacaScript ) 
  
- 웹 클라이언트 프로그래밍 
  - 클라이언트 측 스크립트 언어 
  - HTML문서에서 태그로 표현할 수 없는 로직 처리를 담당하기 위해 개발된 언어 
  - VBScript, JavaScript 등이 있음 
  
- 웹 서버 프로그래밍 
  - CGI 방식 
    - 동적인 웹서버 구축을 위하여 처음으로 개발 ( 현재는 사용되지 않음 ) 
    - 대량 트래픽 발생시 처리속도가 늦어짐 
      - 하나의 요청마다 새로운 프로세스가 생송되므로 시스템에 많은 부하가 걸림 
      - EX : 1000번의 동적 컨텐츠 요청에 응답을 제공하기 위해 CGI 프로그램은 1000개의 프로세스 생성 
      - CGI용 프로그램은 CGI 규약만 지키면 어떤 언어라도 가능 ( C, Rerl 등 ) 
      
  - 어플리케이션 서버 방식 ( 확장 CGI ) 
    - 매번 프로세스를 생성하는 방식이 아니고 
    - 동일한 프로그램에 대해서 하나의 프로세스를 생성한 후 여러개의 스레드 방식으로 요청을 처리
    - 메모리 사용량 및 프로세스 관리 부하 감소로 시스템 부하를 줄임 ( ASP, PHP, Servlet, JSP ) 

★ 서블릿 ( Servlet ) 
  - 실행 코드 방식의 특징 
  - Java 코드 안에서 HTML 태그가 혼재 ( Java 코드 중간에 HTML 태그를 쓰는 방식 ) 
  - 효율성이 떨어짐 
  - 단, 속도는 빠르다. 
  - 객체지향 언어이다. 
    - 자바는 보안이 잘되어 있는 언어이다.
    - 자바는 네트워크 관련하여 유용한 언어 
    - 자바는 멀티스레드를 잘 지원한다. 
    
★ JSP 
  - 스크립트 코드 방식의 특징 
  - HTML 태그 사이 중간에 동적인 컨텐츠 생성을 담당할 Java코드가 들어가 있는 형태 ( HTML 태그 중간에 JSP 언어가 있음 )
  - 상용자 정의 태그로 기증 확장이 가능 
  - Servlet 보단 느리지만 가독성은 좋다. 
  
- Spring MVC
  - Spring : 자바 엔터프라이즈 개발을 편하게 해주는 오픈소스, 경량급 애플리케이션 프레임워크 

- JSP
  - 웹 프로그래밍 언어들 중의 하나 
  - J2EE API의 한 부분 
  - 동적인 페이지를 생성하기 위한 서버측 스크립트 언어 
  - 자바 언어를 기반
    - 객체지향, 플랫폼 독립적, 네트워크 지향적, 뛰어난 보안성, 멀티스레드 기능

- JSP 특징 
  - 빈즈 자바 컴포넌트를 사용가능 
  - 최초 서블릿 컴파일 후 메모리에서 처리 
  - 다른 서블릿간의 간편한 데이터 공유 
  - 자바의 모든 기능을 사용가능 
  - 사용자 정의 태그 생성 및 다양한 기능의 태그 라이브러리 이용가능 
  - 다양한 운영체제와 개발/실행환경 지원 
  
- Servlet
  - 완전한 자바파일의 형태
  - JSP와는 달리 자바 코드 안에 HTML태그들이 포함 
  - JSP 페이지는 하나의 서블릿으로 변환이 되고 다시 컴파일 되어 실행 
  
- JSP의 동작구조
  - JSP 파일의 변환 
    - JSP 페이지 요청 
    - Web Server의 JSP 컨테이너는 JSp 파일을 자바 클래스로 변환 
  - JSP 파일의 동작단계
    - 1. JSP 페이지 요청 
    - 2. JSP 컨테이너로 전송 
      - 2.1 JSP 파일 파싱
      - 2.2 서블릿으로 변환 
      - 2.3 클래스 파일 생성 
      - 2.4 메모리에 적재되어 실행됨 
    - 3. HTML 전송 
    - 4. HTML 표시 ( 실행 )

★ JSP 동작구조 및 라이플 사이클 ( 매우 중요 서술형 확정 ) 
  - JSP페이지를 서버를 요청하면, 서버는 해당 JSP 페이지를 컴파일하여 Servlet클래스로 변경합니다.
  - 변환된 Servelt 클래스는 로딩이 되어 서버의 메모리에 올라갑니다.
  - 로딩된 Servlet 클래스는 인스턴스화 되어 요청에 대한 처리를 준비합니다. 
  - Servlet 인스턴스가 생성된 후, 서버는 init() 메소드를 호출하여 Servlet을 초기화 하고
  - 초기화 된 후, 클라이언트 요청에 대한 서비스를 처리합니다. 이때 service() 메소드가 호출됩니다.
  - Servlet 인스턴스는 일정시간 사용되고 나면, 서버는 destroy() 메소드를 호출하여 Servlet을 종료합니다. 

- JSP 컨테이너 ( = JSP 엔진 ) 
  - JSP를 동작시키기 위해서 필요한 프로그램 
  - Tomcat, JRun, JEtty 등 
  
- JSP의 Life Cycle ( 생명주기 ) 
  - init() 메서드 
    - _jspInit() 
    - 처리에 필요한 자원에 대한 초기화 작업 
  - service() 메서드
    - _jspService()
    - 실제 요청에 대한 처리를 담당하는 메서드, 로직이 담겨 있음 
    - 클라이언트 요청 때마다 반복 수행 
  - destroy() 메서드 
    - _jspDestroy()
    - 웹서버, 어플리케이션이 종료되거나, 서블릿을 메모지에서 언로드하는 경우에 실행, 서블릿 종료를 위한 작업
    - 사용된 자원을 해제한 뒤, 서블릿을 종료 
    
- 서블릿이란 
  - JSP 이전 세대의 동적 웹페이지 생성 언어 
  - Server + Applet의 합성어 
  - 브라우저에서 호출하면 WAS에서 웹 페이지를 동적으로 생성 

- JSP 태그 
  - 스크립트 태그 
  - 액션 태그 
  - 커스텀 태그 
  
- 스크립트 태그 
  - <% %> 사용 
  - < %   % > 이렇게 <% 사이에 공백이 있으면 안됨 
  ★ 종류 
    - 지시어 : <%@ %>    => JSP 페이지의 속성을 지정 
    - 선  언 : <%! %>    => 소속 변수 선언과 메소드 정의 
    - 표현식 : <%= %>    => 변수, 계산식, 함수 호출 결과를 '문자열' 형태로 출력
    - 스크립트릿 : <%  %> => 자바 코드를 기술 
    - 주  석 : <%-- --%> => JSP 페이지의 설명 추가 
  
- 액션 태그 
  - <jsp:include page=" " />  : 현재 JSP 페이지에서 다른 페이지를 포함 
  - <jsp:forward page=" " />  : 현재 JSP 페이지의 제어를 다른 페이지에 전달 
  - <jsp:plugin type="applet" code=" " /> : 자바 애플릿을 플러그인 
  
- 커스텀 태그 
  - <tag:printData dbname="db이름" table="테이블명" /> : 사용자가 직접 정의한 태그를 이용 
  
★ 스크립트 요소
  - 선언문
  - 스크립트릿 
  - 표현식 
  - 주석 
  
★ 스크립트릿 
  - JSP에 자바 코드를 삽입할 때 사용 
  - JSP 페이지가 서블릿으로 변환되고 요청될 때 _jspServer() 메소드 안에서 선언 되는 요소 
  - 스크립트릿은 선언문과 달리 선언된 변수는 지역 변수로 선언이 되고 메소드 선언은 할 수 없음 
  - 스크립트릿 문법 
    - <%  이곳에 필요한 자바 코드 삽입 %> 
    
- 표현식 
  - 동적인 JSP 페이지를 브라우저로 표현을 하기 위한 요소 
  - 변수를 출력하거나, 계산식 또는 메소드의 결과 값을 브라우저에 출력 할 수 있음 
  - 변수나 메소드를 출력하고자 할 때 세미콜론은 표기하지 않음 
  - <%=   사이사이에 공백이 있으면 안됨 
    - <%=application.setRealPath("/")%> 
    - 파일의 경로를 보여주는 표현식 
  
★ 선언문 
  - JSP에서 사용될 변수나 메소드를 선언할 수 있는 요소 
  - JSP페이지 내에서 변수 및 메소드를 선언 후, 변수나 메소드를 이용하여 동적으로 HTML코드를 생송하는데 사용 
  - 선언문에 선언된 변수를 멤버변수라 함 => ( 전역변수와 같은 의미 ) 
  - 선언문 문법 
    - <%! %> 
  - 선언문에서 선언된 변수는 JSP 페이지가 서블릿 코드로 변환이 되면서 '서블릿 클래스'의 멤버변수로 변환

- 주석 
  - 프로그램에 직접적인 영향을 미치지는 않지만 개발자들이 
    소스 분석 내용 및 파일 설명 처리를 위해서 없어서는 안 될 꼭 필요한 요소 
  - HTML 형식의 주석 
    - <!-- --> 
  - JSP 형식의 주석 
    - <%-- --%>
  - 스크립트 형식의 주석 
    - <% /*  */ %> or <% //    %> 
  
★ 지시자의 종류 3가지 
  - 지시자 
    - JSP 페이지가 실행이 될 때 필요한 정보를 JSP컨테이너에 알려줌 
    - 페이지를 이렇게 처리하시오 라는 지시를 내리는 것 
  - 사용법
    - <%@ 지시자 property = "property-value" %>
    - 지시자와 property(속성) 모두 대소문자를 구분 
    - property-value(속성값) 는 반드시 큰따옴표를 사용 
  - 지시자의 종류 
    - page    : <%@ page property="property-value" %>           : JSP페이지에 대한 속성 지정 
    - include : <%@ include file="file-name" %>                 : 태그 부분에 지정한 페이지를 정적으로 삽입 
    - taglib  : <%@ taglib uri="uri-value" prefix="pfx-value"%> : 새로운 태그를 정의하여 이용 
  
- page 지시자 속성 종류 
  - info 
    - JSP 페이지 대한 설명이나 버전, 작성자, 작성일자와 같은 정보를 문자열로 기술 
    - 길이에 제한이 없음 
    - EX : <%@page info="JspStude.com"%>
    
  - language
    - JSP 페이지의 스크립트 요소에서 사용할 언어를 지정 
    - 기본 값은 java
    - EX : <%@page language="java"%>
    
  ★contentType
    - JSP 페이지의 MIME 유형을 지정하는 속성 
    - <%@page contentType="text/html" %>
    - EX : <%@page contentType="text/html; charset=EUC-KR" %>
    
  - extends
    - JSP 페이지가 servlet으로 변환되는 시점에서 상속받을 클래스를 지정 
    - EX : <%@page extends="com.jspstudy" %> 
    
  ★import
    - 자바의 import 문장을 대체하는 속성, 사용할 클래스의 패키지를 지정하는 방법 
    - 필요하면 구분자 ,(콤마)를 이용하여 여러개의 클래스를 지정 
    - JSP 페이지에 여러개의 import페이지 속성도 기술 가능 
    - EX : <%@page import="java.util.*, java.sql.*" import="java.io.*" %>
    - JSP 페이지에서 자동으로 import 되는 패키지 
      - java.lang.*
      - javax.servlet.*
      - javax.servlet.http.*
      - javax.servlet.jsp.*
    
  - seesion
    - JSP 페이지가 session을 사용할지 여부를 지정하는 속성
    - True가 기본값이므로 기본적으로 세션이 사용 가능함 
    - EX : <%@ page session="false" %>
    
  - buffer
    - 버퍼한 동작 속도가 다른 두 장치 간의 인터페이스가 서로의 속도 차를 조정하기 위해 이용하는 일시적인 기억 장소 
    - 버퍼링 : 일반적으로 입력이나 출력에 이용하는 방식으로 프로세스의 처리 속도보다
              입출력의 속도가 느리기 때문에 어느 정도 자료를 모아서 입출력을 처리하는 방법 
    - 출력 버퍼의 기본값을 8KB
    - EX : <%@page buffer="16kb" %> or <%@page buffer="none" %>
    - 출력버퍼 
      - 1. 클라이언트 요청을 받음 
      - 2. JSP 페이지의 출력결과를 버퍼에 저장 
      - 3. 출력버퍼에서 버퍼에 저장된 내용을 클라이언트에 전송 
    
  - autoFlush
    - 버퍼가 모두 찼을 때 자동으로 출력하는지를 지정하는 방법 
    - 버퍼 크기의 자료가 모두 찼을 때 자동으로 웹 브라우저에 출력한다는 의미 
    - 기본값 : true 
    - EX : <%@ page autoFlush="false" %>
    - 버퍼 크기만큼 차기 전, 중간에 수동으로 직접 버퍼를 비워랴 출력이 가능  
    
  - isThreadSafe
    - 하나의 JSP 페이지가 동시에 여러 브라우저의 요청을 처리할 수 있는지 여부를 설정 
    - 기본값 : true
    - EX : <%@ page isThreaSafe="false" %>
    - 요청을 동시에 처리하지 않고 요청한 순서대로 처리 
    
  ★error-Page
    - JSP 페이지를 처리하는 도중에 예외가 발생할 경우, 다른 페이지에서 예외를 처리하도옥 지정하는 속성 
    - EX : <%@ page errorPage="error.jsp" %>
    
  ★isErrorPage
    - 현재 JSP 페이지가 에러 처리를 담당하는 페이지인지 아닌지의 여부를 지정할 때 사용하는 속성 
    - EX : <%@ page isErrorPage="true" %>
    
  ★pageEncoding
    - JSP 페이지에서 사용하는 character의 인코딩을 지정할 때 사용 
    - EX : <%@ page contentType="text/html; charset=UTF-8" 
               pageEncoding="UTF-8" %>
    - EX : <%@ page pageEncoding="EUC-KR" %>
    
- include 지시자 
  - include 지시자는 태그를 기술한 부분에 지정한 파일 삽입함 
  - 홈페이지에서 공통적으로 포함하는 내용을 별도의 파일에 저장해 두었다가 include 지시자를 사용하여 삽입함 
  - EX : <%@include file="로컬URL" %>
  
- 액션태그 
  - 액션태그 6가지 종류 
    ★ forward 
    ★ include
    - getProperty
    - sertProperty 
    - userBean
    
  - include 액션 태그 
    - <jsp:include page="로컬URL" flush="true"/>
    - flush : 포함시킬 페이지의 처리 결과를 삽입하기 이전에 현재 페이지가 지금까지 버퍼의 저장내용을 출력함 
    
    - 변수 선언시 중복 오류가 발생할 수 있음 

  - forward 액션 태그 
    - 현재 페이지의 작업은 모두 중지되고, 출력버퍼에 있는 모든 내용을 버리고 forward 태그가 지정한 다른 페이지로 모든 제어를 이동 
    - <jsp:forward page="로컬URL" />
    
- JSP에서 지시자 include와 액션 태그 include의 차이  
  - 지시자 include
    - 정적 페이지 구성 
    - JSP가 컴파일될 때 코드를 포함시키는 방식 
    - 변수 값을 전달해줄 수 있음 
    
  - 액션 태그 include
    - 동적 페이지 구성
    - JSP 페이지가 실행될 때 포함시키는 방식 
    - 변수 값을 전달해주지 못함 
    
- forward와 sendRedirect의 차이
  - forward는 서버 측에서 처리를 하고, 데이터를 공유할 수 있다.
    - 클라이언트는 서버에서 다른 페이지로 이동하고 있는지 알 수 없습니다. 
    - forward는 request를 공유하기 때문에, forwarding된 페이지에서는 forwarding하기 전 페이지에서 설정한 request 속성들을 사용할 수 있습니다.
    - URL이 변하지 않는다.
    
  - sendRedirect는 클라이언트 측에서 처리를 하고, 데이터를 공유할 수 없다   
    - 서버는 클라이언트에게 다른 페이지로 이동하도록 요청하고, 클라이언트는 새로운 페이지를 요청합니다. 
    - request를 공유하지 않기 때문에, forwarding된 페이지에서 설정한 request 속성들을 사용할 수 없습니다. 
    - 바뀐 페이지로 URL이 변한다.
   
- 내부 객체 
  - 내부 객체의 종류 
    ★ request         : 파라미터를 포함한 요청을 담고 있는 객체 
    ★ response        : 요청에 대란 응답을 담고 있는 객체 
    ★ out             : 페이지 내용을 담고 있는 출력 스트림 객체 
    - session          : 세션 정보를 담고 있는 객체 
    - application      : 어플리케이션 Context의 모든 페이지가 공유할 데이터를 담고 있는 객체 
    - pageContext      : 페이지 실행에 필요한 Context정보를 담고 있는 객체 
    - page             : JSP 페이지의 서블릿 객체 
    - config           : JSP 페이지의 서블릿 설정 데이터 초기화 정보 객체 
    - exception        : JSP 페이지의 서블릿 실행 시 처리하지 못한 예외 객체 
    
  - 내부 객체란 
    - JSP 컨테이너가 제공하는 특별한 객체로 특별한 기능을 제공
    - 선언 과정 및 객체 생성 없이 사용할 수 있는 객체 
    ★ 스크립트 요소에서 내부 객체와 동일한 변수명은 선언할 수 없음 
    
  - 내부객체의 공통 메소드
    - setAtrribute(key, value)    : 주어진 key에 속성값을 연결 
    - getAttributeNames()         : 모든 속성의 이름을 얻어냄 
    - getAttribute(key)           : 주어진 key에 연결된 속성값을 얻어냄 
    - removeAttribute(key)        : 주어진 key에 연결된 속성값을 제거 
    
  ★ JSP 입출력 관련 내부 객체 
    - request
    - response
    - out 
  
  ★ request 내부 객체 
    - 웹 브라우저에서 웹 서버에 있는 JSP 페이지로 전송하는 데이터를 저장하고 처리하는 객체 
    - setCHaracterEncoding       반환값 : void                 인코딩 방식 지정 
    - getParameter(String name)  반환값 : String               파라미터 값을 가져옴 
    - getParameterValues(String name)  반환값 : String[]       파라미터 값을 배열로 받아옴 
    - getParameterNames()        반환값 : Enumeraion
    
    - 웹 브라우저에서 웹 서버에 있는 JSP 페이지로 데이터를 전송하고 그것을 서블릿이 처리 
    
    - <form method="post" action="로컬.jsp">
    - <input name="num">
    - 로컬 JSP 페이지로 num이라는 파라미터 값을 전송 
    - 로컬 JSP 페이지 안에는 
    - <% request.setCHaracterEncoding("EUC-KR");        // 코딩 방식 설정 
         String num = request.getParameter("num"); %>
    - 숫자 : <%=num %> 
    - 이런식으로 getParameter를 활용하여 값을 받아와서 사용할 수 있다. 
    
  - HTTP 에서 제공하는 전송 방식 ( request 내부 객체 관련 ) 
    - Post방식 
    - <input> 태그의 입력 내용을 페이지 요청으로 서버로 전송함 
    - 장점 : HTTP 헤더 속에 감춰서 전송되므로 특별한 도구를 사용하지 않는 한 보이지 않음 
           : 전송되는 데이터 양에 한계가 없음 
    - 단점 : 특별하게 정보를 유지하지 않을 경우, 새로 고침에 의해 만료된 페이지 메시지를 출력함 
    
    - 보안이 필요한 로그인 정보나, 회원 정보 등의 개인 정보 전송에 많이 사용 
    
  - Get방식 
    - <input> 태그의 입력 내용을 URL을 통해서 서버로 전송
    - 단점 : 이름과 값 형태로 URL이 그대로 전송되므로 다른 사용자에게 그대로 노출
           : 4,096 바이트까지만 전송이 가능
    - 장점 : 새로 고침을 하거나 URL을 복사하여 다른 브라우저에서도 동일한 문서 보기가 사능함 
    
    - 주로 포털 사이트에서 검색어 전달 등 보안에 신경쓰지 안아도 되는 곳에서 많이 사용 
    - http://localhost:8080/ch05/a.jsp?strID=apple&pwd=1234
    - ' ?strID=apple&pwd=1234&gender=man  ' 이 형식 외우기 ( 시험 예상 ) 
    - 각 파라미터는 & 로 연결 , 띄어쓰기는 + 로 연결 
    
  ★ response 내부 개체 
    - 클라이언트의 요청에 대한 응답을 보내기 위해서 응답 관련 데이터를 저장하는 객체 
      - void setHeader( name, value )     : 응답에 포함될 Header를 설정합니다.
      - void setContextType(type)         : 출력되는 페이지의 contextType을 설정합니다.
      - String getCharacterEncoding()     : 응답 페이지의 문자 인코딩 Type을 반환합니다.
      - void sendRedirect(URL)            : 지정된 URL로 요청을 재전송합니다. 
  
  ★ out 내부객체 
    - JSP 페이지의 결과 출력을 위한 출력 스트림 객체
    - 출력과 버퍼링에 관련된 주요 메소드를 제공 
    
    - 주요 메소드 
      - getBufferSize()   : 출력 버퍼의 전체 크기를 바이트 단위로 반환합니다. 
      - getRemaining()    : 출력 버퍼의 남은 양을 바이트 단위로 반환합니다. 
      - clearBuffer()     : 현재 출력 버처에 저장된 내용을 취소합니다.
      ★ println()        : string을 브라우저에 출력합니다. 
      - flush()           : 현재 출려 버퍼의 내용을 flush하여 클라이언트로 전송합니다. 
      - close()           : 출력 버퍼의 내용을 flush하고 스트림을 닫습니다. 
  
  
