- 0404
- 배운데 까지 중간고사 정리 

- WWW
  - '팀 버너스 리'가 제안하여 개발된 정보 공유 방안 ( HTML, HTTP 통신 프로토콜 ) 
  - 전 세계를 연결한 거미줄과 같은 인터넷 말에서의 정보의 공유 
  
- 웹 구조 
  - 클라이언트-서버 구조 
  - 웹 브라우저가 있는 클라이언트가 자료를 요청하면, 웹 서버가 있는 서버는 요청에 응답 
  
- 웹 동작 
  - 요청 : 클라이언트에서 서버로 정보를 요구하기 위해 보내는 메시지 ( GET방식, POST 방식 ) 
  - 응답 : 요구된 메시지에 대한 응답 메시지 ( HTML, 이미지 등 )
  
- 웹 서버 
  - 웹 서버는 웹의 HTTP 프로토콜을 사용하여 클라이언트의 요청에 응답을 하는 프로그램 
  - 웹 서버 종류 ( 아파치, IIS, 톰캣 ) 
  
- 정적 웹 페이지 
  - 사용자가 웹 페이지를 요청했을 경우에 서버에 저장된 페이지를 그대로 클라이언트에게 제공 
  - 어떤 사용자라도 같은 내용의 페이지를 볼 수 있음 
  - 서버에 있는 문서가 수정되지 않는 한 항상 같은 웹 문서 응답 
  
- 동적 웹 페이지 
  - 사용자가 웹 페이지를 요청했을 경우 서버에서 실시간으로 해당 작업을 처리해 클라리언트에게 제공 
  - 사용자마다 각기 다른 내용의 페이지를 볼 수 있음 
  - 시시각각 변화하는 데이터를 반영하는 페이지 ( ASP, JSP, PHP등의 서버 스크립트 언어 사용 ) 
  
- 스크립트 
  - 서버 측 스크립트 
    - 웹 서버에서 실행 되는 스크립트로 서버 측에서 동적인 컨텐츠를 생성 ( ASP, JSP, PHP ) 
  - 클라이언트 측 스크립트 
    - 클라이언트인 사용자의 웹 브라우저에서 실행 ( Javascript, VBScript ) 
    
- 웹 어플리케이션 실행 순서 
  - 웹 브라우저는 웹 서버에 웹 페이지를 요청한다. 
  - 웹 서버는 웹 어플리케이션을 실행하여 그 결과를 웹 브라우저에 응답한다.
  - 웹 서버에서 웹 어플리케이션을 처리한다. ( PHP, ASP, JSP )
  - 웹 브라우저는 웹 서버로부터의 응답 결과를 출력한다. ( JacaScript ) 
  
- 웹 클라이언트 프로그래밍 
  - 클라이언트 측 스크립트 언어 
  - HTML문서에서 태그로 표현할 수 없는 로직 처리를 담당하기 위해 개발된 언어 
  - VBScript, JavaScript 등이 있음 
  
- 웹 서버 프로그래밍 
  - CGI 방식 
    - 동적인 웹서버 구축을 위하여 처음으로 개발 ( 현재는 사용되지 않음 ) 
    - 대량 트래픽 발생시 처리속도가 늦어짐 
      - 하나의 요청마다 새로운 프로세스가 생송되므로 시스템에 많은 부하가 걸림 
      - EX : 1000번의 동적 컨텐츠 요청에 응답을 제공하기 위해 CGI 프로그램은 1000개의 프로세스 생성 
      - CGI용 프로그램은 CGI 규약만 지키면 어떤 언어라도 가능 ( C, Rerl 등 ) 
      
  - 어플리케이션 서버 방식 ( 확장 CGI ) 
    - 매번 프로세스를 생성하는 방식이 아니고 
    - 동일한 프로그램에 대해서 하나의 프로세스를 생성한 후 여러개의 스레드 방식으로 요청을 처리
    - 메모리 사용량 및 프로세스 관리 부하 감소로 시스템 부하를 줄임 ( ASP, PHP, Servlet, JSP ) 

- 서블릿 ( Servlet ) 
  - 실행 코드 방식의 특징 
  - Java 코드 안에서 HTML 태그가 혼재 ( Java 코드 중간에 HTML 태그를 쓰는 방식 ) 
  - 효율성이 떨어짐 
  - 단, 속도는 빠르다. 
  
- JSP 
  - 스크립트 코드 방식의 특징 
  - HTML 태그 사이 중간에 동적인 컨텐츠 생성을 담당할 Java코드가 들어가 있는 형태 ( HTML 태그 중간에 JSP 언어가 있음 )
  - 상용자 정의 태그로 기증 확장이 가능 
  - Servlet 보단 느리지만 가독성은 좋다. 
  
- Spring MVC
  - Spring : 자바 엔터프라이즈 개발을 편하게 해주는 오픈소스, 경량급 애플리케이션 프레임워크 

- JSP
  - 웹 프로그래밍 언어들 중의 하나 
  - J2EE API의 한 부분 
  - 동적인 페이지를 생성하기 위한 서버측 스크립트 언어 
  - 자바 언어를 기반
    - 객체지향, 플랫폼 독립적, 네트워크 지향적, 뛰어난 보안성, 멀티스레드 기능

- JSP 특징 
  - 빈즈 자바 컴포넌트를 사용가능 
  - 최초 서블릿 컴파일 후 메모리에서 처리 
  - 다른 서블릿간의 간편한 데이터 공유 
  - 자바의 모든 기능을 사용가능 
  - 사용자 정의 태그 생성 및 다양한 기능의 태그 라이브러리 이용가능 
  - 다양한 운영체제와 개발/실행환경 지원 
  
- Servlet
  - 완전한 자바파일의 형태
  - JSP와는 달리 자바 코드 안에 HTML태그들이 포함 
  - JSP 페이지는 하나의 서블릿으로 변환이 되고 다시 컴파일 되어 실행 
  
- JSP의 동작구조
  - JSP 파일의 변환 
    - JSP 페이지 요청 
    - Web Server의 JSP 컨테이너는 JSp 파일을 자바 클래스로 변환 
  - JSP 파일의 동작단계
    - 1. JSP 페이지 요청 
    - 2. JSP 컨테이너로 전송 
      - 2.1 JSP 파일 파싱
      - 2.2 서블릿으로 변환 
      - 2.3 클래스 파일 생성 
      - 2.4 메모리에 적재되어 실행됨 
    - 3. HTML 전송 
    - 4. HTML 표시 ( 실행 )

- JSP 컨테이너 ( = JSP 엔진 ) 
  - JSP를 동작시키기 위해서 필요한 프로그램 
  - Tomcat, JRun, JEtty 등 
  
- JSP의 Life Cycle ( 생명주기 ) 
  - init() 메서드 
    - _jspInit() 
    - 처리에 필요한 자원에 대한 초기화 작업 
  - service() 메서드
    - _jspService()
    - 실제 요청에 대한 처리를 담당하는 메서드, 로직이 담겨 있음 
    - 클라이언트 요청 때마다 반복 수행 
  - destroy() 메서드 
    - _jspDestroy()
    - 웹서버, 어플리케이션이 종료되거나, 서블릿을 메모지에서 언로드하는 경우에 실행, 서블릿 종료를 위한 작업
    - 사용된 자원을 해제한 뒤, 서블릿을 종료 
    
- 서블릿이란 
  - JSP 이전 세대의 동적 웹페이지 생성 언어 
  - Server + Applet의 합성어 
  - 브라우저에서 호출하면 WAS에서 웹 페이지를 동적으로 생성 

- JSP 태그 
  - 스크립트 태그 
  - 액션 태그 
  - 커스텀 태그 
  
- 스크립트 태그 
  - <% %> 사용 
  - < %   % > 이렇게 <% 사이에 공백이 있으면 안됨 
  - 종류 
    - 지시어 : <%@ %>    => JSP 페이지의 속성을 지정 
    - 선  언 : <%! %>    => 소속 변수 선언과 메소드 정의 
    - 표현식 : <%= %>    => 변수, 계산식, 함수 호출 결과를 '문자열' 형태로 출력
    - 스크립트릿 : <%  %> => 자바 코드를 기술 
    - 주  석 : <%-- --%> => JSP 페이지의 설명 추가 
  
- 액션 태그 
  - <jsp:include page=" " />  : 현재 JSP 페이지에서 다른 페이지를 포함 
  - <jsp:forward page=" " />  : 현재 JSP 페이지의 제어를 다른 페이지에 전달 
  - <jsp:plugin type="applet" code=" " /> : 자바 애플릿을 플러그인 
  
- 커스텀 태그 
  - <tag:printData dbname="db이름" table="테이블명" /> : 사용자가 직접 정의한 태그를 이용 
  
- 스크립트 요소
  - 선언문
  - 스크립트 릿 
  - 표현식 
  - 주석 
  
- 스크립트릿 
  - JSP에 자바 코드를 삽입할 때 사용 
  - JSP 페이지가 서블릿으로 변환되고 요청될 때 _jspServer() 메소드 안에서 선언 되는 요소 
  - 스크립트릿은 선언문과 달리 선언된 변수는 지역 변수로 선언이 되고 메소드 선언은 할 수 없음 
  - 스크립트릿 문법 
    - <%  이곳에 필요한 자바 코드 삽입 %> 
    
- 표현식 
  - 동적인 JSP 페이지를 브라우저로 표현을 하기 위한 요소 
  - 변수를 출력하거나, 계산식 또는 메소드의 결과 값을 브라우저에 출력 할 수 있음 
  - 변수나 메소드를 출력하고자 할 때 세미콜론은 표기하지 않음 
  - <%=   사이사이에 공백이 있으면 안됨 
    - <%=application.setRealPath("/")%> 
    - 파일의 경로를 보여주는 표현식 
  
- 선언문 
  - JSP에서 사용될 변수나 메소드를 선언할 수 있는 요소 
  - JSP페이지 내에서 변수 및 메소드를 선언 후, 변수나 메소드를 이용하여 동적으로 HTML코드를 생송하는데 사용 
  - 선언문에 선언된 변수를 멤버변수라 함 => ( 전역변수와 같은 의미 ) 
  - 선언문 문법 
    - <%! %> 
  - 선언문에서 선언된 변수는 JSP 페이지가 서블릿 코드로 변환이 되면서 '서블릿 클래스'의 멤버변수로 변환

- 주석 
  - 프로그램에 직접적인 영향을 미치지는 않지만 개발자들이 
    소스 분석 내용 및 파일 설명 처리를 위해서 없어서는 안 될 꼭 필요한 요소 
  - HTML 형식의 주석 
    - <!-- --> 
  - JSP 형식의 주석 
    - <%-- --%>
  - 스크립트 형식의 주석 
    - <% /*  */ %> or <% //    %> 
  
- 지시자의 종류 3가지 
  - 지시자 
    - JSP 페이지가 실행이 될 때 필요한 정보를 JSP컨테이너에 알려줌 
  - 사용법
    - <%@ 지시자 property = "property-value" %>
    - 지시자와 property(속성) 모두 대소문자를 구분 
    - property-value(속성값) 는 반드시 큰따옴표를 사용 
  - 지시자의 종류 
    - page    : <%@ page property="property-value" %>           : JSP페이지에 대한 속성 지정 
    - include : <%@ include file="file-name" %>                 : 태그 부분에 지정한 페이지를 정적으로 삽입 
    - taglib  : <%@ taglib uri="uri-value" prefix="pfx-value"%> : 새로운 태그를 정의하여 이용 
  
    
    
    
    
    
    
    
