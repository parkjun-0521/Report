0322 
- 3주차 

- JSP는 HTML을 기반으로 작성된다.
- JSP와 서블릿 
  - 자바 기반으로 웹프로그래밍
  - JSP로 만들때 : 프로그램하기 쉽다 ( 단점 : 느리다 ) 
    - HTML 중간에 JSP 코드가 삽입 되는 방식 
  - 서블릿 만들때 : 프로그램하기 어렵다 ( 장점 : 빠르다 ) 
    - 서블릿 중간에 HTML 코드가 삽입되는 방식 

- JSP 파일의 변환     
  - 프로그램을 JSP로 만들지만 실행할 때는 서블릿으로 실행된다. 
  
- JSP 실행 순서 
  - 최초의 요청일때만 JSP 서블릿으로 변경 후 컴파일을 해둠
  - 두번째 요청부터는 컴파일 해둔 class 파일을 찾아서 class 파일을 바로 실행 하는 방식 
  ★ 서블릿은 한번 메모리에 올라가면 메모리에서 내려오지 않는다. ( 웹서버가 종료될 때 까지 ) 
  
- JSP 컨테이너 = JSP 엔진 
  - JSP를 동작시키기 위해서 필요한 프로그램 
  - Tomcat, Resin, JRun, Jetty 등 
  
- 참조 : WAS
  - WAS는 서버 단에서 애플리케이션이 동작 할 수 있도록 지원하는 컨테이너가 포함된 서버를 말함 
  - WAS 종류로는 Tomcat, WebLogic, WebSphere, ZEUS, JBoss, Resin등이 있다. 
  
- JSP 생명주기 
  - JSP 페이지는 서블릿으로 변환이 되고, 클래스 파일로 컴파일 된 후, 메모리에 로드되어 '초기화', '처리단계', '소멸'의 단계를 거친다.
  
  - init() 메서드 
    - _jsplnit() 
    - 처리에 필요한 자원에 대한 초기화 작업 
  
  - service() 메서드
    - _jspservice()
    - 실제 요청에 대한 처리를 담당하는 메서드, 로직이 담겨 있음 
    - 클라이언트 요청 때마다 반복 수행 
  
  - destroy() 메서드 
    - _jspDestroy()
    - 웹 서버, 어플리케이션이 종료되거나, 서블릿을 메모리에서 언로드하는 경우에 실행, 서블릿 종료를 위한 작업 
    - 사용된 자원을 해제한 뒤, 서블릿을 종료 
    
  - init()이 딱한번 실행되서 자원을 초기화 
  - 누군가의 요청 정보가 오면 service() 메서드가 실행되서 작업을 처리하고 
  - 종료가 될때 destroy() 메서드가 실행되면서 프로그램이 종료가 됨 

- JSP가 서블릿을 변경될 때 
  - _jsplnit, _jspservice, _jspDestroy 메소드가 자동으로 생성이 된다. 
  - 서블릿은 항상 이런 메소드가 있구나... 라고 생각하면 편함 

-  서블릿이란?
  - JSP 이전 세대의 동적 웹페이지 생성 언어 
  - Server + Applet의 합성어 
  - 브라우저에서 호출하면 WAS에서 웹 페이지를 동적으로 생성 
  
- 서블릿의 life cycle
  - 브라우저에서 서블릿을 호출하면 WAS는 서블릿 클래스를 로딩 
  - 1. Servlet 인스턴스 생성, init() 메소드 자동으로 호출 
  - 2. Servlet 인스턴스로 부터 스레드를 생성, service() 메소드 호출 
  - 3. 서블릿 종료시 destroy() 메소드 호출 
  
- servlet 생성 
  - doget, doPost를 가장 많이 씀 ( 실습할때는 service만 체크 생성자 지우기 ) 
  - main -> java -> other -> 서블릿 찾기 -> web 폴더 안에 서블릿이 있다. 
  
  - 서블릿에서는 어노테이션이 굉장히 중요 ( @Override 같이 @가 앞에 붙어 있는 것 ) 

- JSP 문법 
  - 자바의 JSP 스크립트 언어이다.
  - JSP는 태그 언어이다. 
    - <% ... %>   => 지시어 : JSP 페이지의 속성을 지정  
    - <%! ... %>  => 선언 : 소속변수 선언과 메소드 정의 
    - <%= ... %>  => 표현식 : 변수. 계산식, 함수 호출 결과를 문자열 형태로 출력 
    - <%    %>    => 스크립트릿 : 자바 코드 기술
    - <%--  --%>  => 주석 : JSP 페이지의 설명 추가 
  - 액션 태그 
    - XML 스타일의 태그로 기술한 동작 기능을 수행하는 방식 
  - 커스텀 태그 
    - 새로운 태그를 정의하여 이용하는 방법으로 JSP만의 고유한 방식 
  
- 스크립트 요소 ( <!-- --> 이건 HTML 주석이다 )  
  - <%@ ... %>  => 지시어 : JSP 페이지의 속성을 지정  ( 맨 첫줄에 항상 사용 ) 
  - <%! ... %>  => 선언 : 소속변수 선언과 메소드 정의 
  - <%= ... %>  => 표현식 : 변수. 계산식, 함수 호출 결과를 문자열 형태로 출력  ( 예시 : <%=strVar %> )
  - <%    %>    => 스크립트릿 : 자바 코드 기술 ( 예시 : <% String strVar = "Korea Fighting!!!"; %> ) 
  - <%--  --%>  => 주석 : JSP 페이지의 설명 추가
    
- 스크립트릿 이란? 
  - JSP에 자바 코드를 삽입할 때 사용 
  - JSp 페이지가 서블릿으로 변환되고 요청될 때 _jspService() 메소드 안에 선언 되는 요소 
  - 선언문과 달리 선언된 변수는 '지역 변수'로 선언이되고 '메소드 선언은 할 수 없음' 
  
- 스크립트릿 사용 예 
  - out.print() : 화면에 출력하는 
    
    
    
    
    
