- 0528
- 기말고사 정리 

- 멀티테스킹 개념 
  - 여러개의 작업이 동시에 처리되는 것 
  
  - 멀티스레드(thread)라는 개념이 존재 
  
- 스레드와 운영체제 
  - 스레드 
    - 운영체제에 의해 관리되는 하나의 작업 혹은 태스크 ( 스레드 = 테스크 ) 
    - 스레드와 태스크( 혹은 작업 )은 바꾸어 사용해도 무관 
    
  - 멀티스레딩 
    - 여러 스레드를 동시에 실행시키는 응용프로그램 
    
  - 스레드 구성 
    - 스레드 코드 
      - 작업을 실행하기 위해 작성한 프로그램 코드 
      - 개발자가 작성 
    
    - 스레드 정보 
      - 스레드 명, 스레드 ID 스레드의 실행 소요 시간, 스레드의 우선 순위 등 
      - 운영체제가 스레드에 대해 관리하는 정보 
      
- 멀티태스킹과 멀티스레딩 
  - '멀티태스킹' 구현 기술 
    - 멀티프로세싱  
      - 하나의 응용프로그램이 여러 개의 프로세스를 생성하고, 각 프로세스가 하나의 작업을 처리하는 기법 
      - 각 프로세스가 독립된 메모리 영역을 보유하고 실행 
      - 프로세스 사이의 문맥 교환에 따른 과도한 오버헤드와 시간 소모의 문제점 
      
    - 멀티스레딩   
      - 하나의 응용프로그램이 여러 개의 스레드를 생성하고, 각 스레드가 하나의 작업을 처리하는 기법 
      - 하나의 응용프로그램에 속한 스레드는 변수 메모리, 파일 오픈 테이블 등 자원으로 공유하므로, 문맥 교환에 따른 오버헤드가 매우 작음 
      - 현재 대부분의 운영체제가 멀티스레딩을 기본으로 하고 있음 
      
- 자바 스레드와 JVM
  - 자바 스레드 
    - 자바 가상 기계 (JVM)에 의해 스케쥴되는 실행 단위의 코드 블럭 
    - 스레드의 생명주기는 JVM에 의해 관리됨 : JVM은 스레드 단위로 스케쥴링 
    
  - JVM과 자바의 멀티스레딩 
    - 하나의 JVM은 하나의 자바 응용프로그램만 실행 
      - 자바 응용프로그램이 시작될 때 JVM이 함께 실행됨
      - 자바 응용프로그램이 종료하면 JVM도 함께 종료함 
    - 응용프로그램은 하나 이상의 스레드로 구성 가능 
      
  - 자바 스레드 만들기 
    - java.lang.Thread : 클래스를 상속받아 스레드를 작성 
    - java.lang.Runnable : 인터페이스를 구현하여 스레드 작성 
    
- Thread 클래스 주요 메소드 
  - THread()          : 스레드 객체 생성 
  - void run()        : 스레드 코드로서 JVM에 의해 호출된다, 개발자는 반드시 오버라이딩하여 스레드 코드를 작성해야한다. 
  - void start()      : JVM에게 스레드 실행을 시작하도록 요청 
  - void interrupt()  : 스레드 강제 종료 
  - long getId()      : 스레드의 ID값 리턴 
  - String getName()  : 스레드의 이름 리턴 
  
- Thread 클래스 상속받아 스레드 만들기 
  - Thread를 상속받아 run() 오버라이딩 
      - class TimerThread(클래스명) extends Thread{  
            public void run() {   } 
        }
      - Thread 클래스 상속 
      - run() 메소드 작성 

    - 스레드 객체 생성 
      - TimerThread th = new TimreThread();
      - 생성된 객체는 필드와 메소드를 가진 객체일 뿐 스레드로 작동하지 않음 

    - 스레드 시작 
      - th.start();
      - 스레드로 작동 시작 
      - 스레드 객체의 run()이 시작됨 
      - JVM에 의해 스케쥴되기 시작함 
    
  - Runnable 인터페이스로 스레드 만들기 
      - Runnable 인터페이스를 구현하는 새 클래스 작성 
        - class TimerRunnable implements Runnable{ 
                public void run() {   }
          }

      - 스레드 객체 생성 
        - Thread th = new Thread(new TimmerRunnable());

      - 스레드 시작 
        - th.start(); 
        - 스레드로 작동 시작 
        - 스레드 객체의 run()이 시작됨 
        - JVM에 의해 스케쥴되기 시작함 
      
- main 스레드 
  - JVM이 응용프로그램을 실행할 때 디폴트로 생성된는 스레드 
  - main() 메소드 실행 시작 
  - main() 메소드가 종료하면 main 스레드 종료 
    
- 스레드 동기화 
  - 멀티스레드 프로그램 작성시 주의점 
    - 다수의 스레드가 공유 데이터에 동시에 접근하는 경우
    
  - 스레드 동기화 
    - 동기화 
      - 스레드 사이의 실행순서 제어, 공유 데이터에 대한 접근을 원활하게 하는 기법 
    - 멀티스레드의 공유 데이터의 동시 접근 문제 해결 
      - 공유 데이터를 접근하는 모든 스레드의 한 줄 세우기 
      - 한 스레드가 공유 데이터에 대한 작업을 끝낼 때 까지 다른 스레드가 대기 하도록 함 
      
    - 자바의 스레드 동기화 방법 
      - synchronized 키워드로 동기화 블록 지정 
      - wait()-notify() 메소드로 스레드의 실행 순서 제어 
      
- synchronized 블록 지정 
  - synchronized 키워드 
    - 스레드가 독점적으로 실행해야 하는 부분을 표시하는 키워드
    - synchonized 블록 지정 방법 
    
  - synchronized 블록이 실행될 때
    - 먼저 실행한 스레드가 모니터를 소유 
    - 모니터를 소유한 스레드가 모니터를 내놓을 때까지 다른 스레드 대기 
    
- wait()-notify()를 이용한 스레드 동기화
  - 필요한 경우
    - 공유 데이터로 두개 이상의 스레드가 데이터를 주고 받을 때
  
  - 동기화 메소드 
    - wait() : 다른 스레드가 notify()를 불러줄 때까지 기다린다. 
    - noify() : wait()를 호출하여 대기중인 스레드를 깨운다. 
      
- 자바의 입출력 스트림 
  - 
    
    
    
    
  
  
  
  
  
  
       
      
      
      
      
