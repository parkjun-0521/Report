- 0528
- 기말고사 정리 

- 멀티테스킹 개념 
  - 여러개의 작업이 동시에 처리되는 것 
  
  - 멀티스레드(thread)라는 개념이 존재 
  
- 스레드와 운영체제 
  - 스레드 
    - 운영체제에 의해 관리되는 하나의 작업 혹은 태스크 ( 스레드 = 테스크 ) 
    - 스레드와 태스크( 혹은 작업 )은 바꾸어 사용해도 무관 
    
  - 멀티스레딩 
    - 여러 스레드를 동시에 실행시키는 응용프로그램 
    
  - 스레드 구성 
    - 스레드 코드 
      - 작업을 실행하기 위해 작성한 프로그램 코드 
      - 개발자가 작성 
    
    - 스레드 정보 
      - 스레드 명, 스레드 ID 스레드의 실행 소요 시간, 스레드의 우선 순위 등 
      - 운영체제가 스레드에 대해 관리하는 정보 
      
- 멀티태스킹과 멀티스레딩 
  - '멀티태스킹' 구현 기술 
    - 멀티프로세싱  
      - 하나의 응용프로그램이 여러 개의 프로세스를 생성하고, 각 프로세스가 하나의 작업을 처리하는 기법 
      - 각 프로세스가 독립된 메모리 영역을 보유하고 실행 
      - 프로세스 사이의 문맥 교환에 따른 과도한 오버헤드와 시간 소모의 문제점 
      
    - 멀티스레딩   
      - 하나의 응용프로그램이 여러 개의 스레드를 생성하고, 각 스레드가 하나의 작업을 처리하는 기법 
      - 하나의 응용프로그램에 속한 스레드는 변수 메모리, 파일 오픈 테이블 등 자원으로 공유하므로, 문맥 교환에 따른 오버헤드가 매우 작음 
      - 현재 대부분의 운영체제가 멀티스레딩을 기본으로 하고 있음 
      
- 자바 스레드와 JVM
  - 자바 스레드 
    - 자바 가상 기계 (JVM)에 의해 스케쥴되는 실행 단위의 코드 블럭 
    - 스레드의 생명주기는 JVM에 의해 관리됨 : JVM은 스레드 단위로 스케쥴링 
    
  - JVM과 자바의 멀티스레딩 
    - 하나의 JVM은 하나의 자바 응용프로그램만 실행 
      - 자바 응용프로그램이 시작될 때 JVM이 함께 실행됨
      - 자바 응용프로그램이 종료하면 JVM도 함께 종료함 
    - 응용프로그램은 하나 이상의 스레드로 구성 가능 
      
  - 자바 스레드 만들기 
    - java.lang.Thread : 클래스를 상속받아 스레드를 작성 
    - java.lang.Runnable : 인터페이스를 구현하여 스레드 작성 
    
- Thread 클래스 주요 메소드 
  - THread()          : 스레드 객체 생성 
  - void run()        : 스레드 코드로서 JVM에 의해 호출된다, 개발자는 반드시 오버라이딩하여 스레드 코드를 작성해야한다. 
  - void start()      : JVM에게 스레드 실행을 시작하도록 요청 
  - void interrupt()  : 스레드 강제 종료 
  - long getId()      : 스레드의 ID값 리턴 
  - String getName()  : 스레드의 이름 리턴 
  
- Thread 클래스 상속받아 스레드 만들기 
  - Thread를 상속받아 run() 오버라이딩 
      - class TimerThread(클래스명) extends Thread{  
            public void run() {   } 
        }
      - Thread 클래스 상속 
      - run() 메소드 작성 

    - 스레드 객체 생성 
      - TimerThread th = new TimreThread();
      - 생성된 객체는 필드와 메소드를 가진 객체일 뿐 스레드로 작동하지 않음 

    - 스레드 시작 
      - th.start();
      - 스레드로 작동 시작 
      - 스레드 객체의 run()이 시작됨 
      - JVM에 의해 스케쥴되기 시작함 
    
  - Runnable 인터페이스로 스레드 만들기 
      - Runnable 인터페이스를 구현하는 새 클래스 작성 
        - class TimerRunnable implements Runnable{ 
                public void run() {   }
          }

      - 스레드 객체 생성 
        - Thread th = new Thread(new TimmerRunnable());

      - 스레드 시작 
        - th.start(); 
        - 스레드로 작동 시작 
        - 스레드 객체의 run()이 시작됨 
        - JVM에 의해 스케쥴되기 시작함 
      
- main 스레드 
  - JVM이 응용프로그램을 실행할 때 디폴트로 생성된는 스레드 
  - main() 메소드 실행 시작 
  - main() 메소드가 종료하면 main 스레드 종료 
    
- 스레드 동기화 
  - 멀티스레드 프로그램 작성시 주의점 
    - 다수의 스레드가 공유 데이터에 동시에 접근하는 경우
    
  - 스레드 동기화 
    - 동기화 
      - 스레드 사이의 실행순서 제어, 공유 데이터에 대한 접근을 원활하게 하는 기법 
    - 멀티스레드의 공유 데이터의 동시 접근 문제 해결 
      - 공유 데이터를 접근하는 모든 스레드의 한 줄 세우기 
      - 한 스레드가 공유 데이터에 대한 작업을 끝낼 때 까지 다른 스레드가 대기 하도록 함 
      
    - 자바의 스레드 동기화 방법 
      - synchronized 키워드로 동기화 블록 지정 
      - wait()-notify() 메소드로 스레드의 실행 순서 제어 
      
- synchronized 블록 지정 
  - synchronized 키워드 
    - 스레드가 독점적으로 실행해야 하는 부분을 표시하는 키워드
    - synchonized 블록 지정 방법 
    
  - synchronized 블록이 실행될 때
    - 먼저 실행한 스레드가 모니터를 소유 
    - 모니터를 소유한 스레드가 모니터를 내놓을 때까지 다른 스레드 대기 
    
- wait()-notify()를 이용한 스레드 동기화
  - 필요한 경우
    - 공유 데이터로 두개 이상의 스레드가 데이터를 주고 받을 때
  
  - 동기화 메소드 
    - wait() : 다른 스레드가 notify()를 불러줄 때까지 기다린다. 
    - noify() : wait()를 호출하여 대기중인 스레드를 깨운다. 
      
- 자바의 입출력 스트림 
  - 입출력 장치와 자바 응용프로그램 연결 
    - 입력 스트림 : 입력 장치로부터 자바 프로그램으로 데이터를 전달하는 객체
    - 출력 스트림 : 자바 프로그램에서 출력장치로 데이터를 보내는 객체 
    
  - 특징 
    - 입출력 스트림 기본 단위 : 바이트 
    - 단방향 스트림, 선입 선출 구조 
    
- 자바의 입출력 스트림 종류 
  - 문자 스트림 
    - 문자만 입출력하는 스트림 
    - 문자가 아닌 바이너리 데이터는 스트림에서 처리하지 못함 
    - 문자가 아닌 데이터를 문자 스트림으로 출력하면 깨진 기호가 출력 
    - 바이너리 파일을 문자 스트림으로 읽을 수 없는 바이트가 생겨서 오류 발생 
    
  - 바이트 스트림 
    - 입출력 데이터를 단순 바이트의 흐름으로 처리 
    - 문자 데이터 든 바이너리 데이터든 상관없이 처리 가능 
    
- 스트림 연결  
  - 여러 개의 스트림을 연결하여 사용할 수 있음 
    - InputStreamReader rd = new InputStreamReader(System.in);
    
  - 문자 스트림으로 텍스트 파일 읽기 
    - 텍스트 파일을 읽기 위해 문자 스트림 FileReader 클래스 이용 
    - 1. 파일 입력 스트림 생성 
      - FilReader fin = new FileReader(" 파일 경로 "); 
    - 2. 파일 읽기 
      - read()로 문자 하나 씩 파일에서 읽음 
    - 3. 스트림 닫기   
      - 스트림이 더 이상 필요 없으면 닫아줘야한다. 닫힌 스트림에서는 읽을 수 없다. 
      - close()로 스트림 닫기 
      - fin.close();
      
- 파일 입출력과 예외 처리 
  - 파일 입출력 동안 예외 발생 가능 
    - 스트림 생성 동안 : FileNotFoundException 발생 가능 
    - 파일의 경로명이 틀리거나, 디스크의 고장 등으로 파일을 열 수 없음 
    
  - 파일 읽기, 쓰기, 닫기를 하는 동안 : IOException 발생 가능 
    - 디스크 오작동, 파일이 중간에 깨진 경우, 디스크 공간이 모자라서 파일 입출력 불가 
    
  - 반드시 try-catch 문을 사용하여 오류를 잡아줘야함 
  
- 문자 스트림으로 텍스트 파일 쓰기 
  - 텍스트 파일에 쓰기 위해 줌다 스트림 FileWriter 클래스 이용 
  - 1. 파일 출력 스트림 생성 
    - 스트림을 생성하고 파일을 열어 스트림과 연결 
    - FileWriter fout = new FileWriter(" 경로 ")
    
  - 2. 파일 쓰기 
    - writer()로 문자 하나 씩 파일에 기록 
      - fout.write('A'); // A문자를 파일에 기록 
    
    - 블록단위로 쓰기 가능 
      - char[] buf = new char[1024]
      - fout.write(buf, 0 , buf.length); // buf[0]부터 버퍼 크기만큼 쓰기 
  
  - 3. 스트림 닫기 
    - close()로 스트림 닫기 
    
- File 클래스 
  - File 클래스 
    - 파일의 경로명 및 속성을 다루는 클래스 
      - java.io.File
      - 파일과 디렉터리 경로명의 추상적 표현 
    
    - 파일이름 변경, 삭제, 디렉터리 생성, 크기 등 파일 관리 
    - FIle 객체에는 파일 읽기 쓰기 기능이 없음 
      - 파일 입출력은 파일 입출력 스트림 이용 
      
    - File 객체 생성 
      - 생성자에 파일 경로명을 주어 File 객체 생성 : File f = new File(" 경로 ")
      - 디렉터리와 파일명을 나누어 생성자 호출 : File f = new File("경로", "파일명");
      
- 네트워크 
  - TCP/IP 프로토콜 
    - TCP는 Transmission Control Protocol 
    - 두 시스템 간에 신뢰성 있는 데이터의 전송을 관장하는 프로토콜 
    - TCP에서 동작하는 응용프로그램 사례 ( e-mail, 웹(HTTP) 등 ) 
    
  - IP
    - Internet Protocol
    - 패킬 교환 네트워크에서 송신 호스트와 수신 호스트가 데이터를 주고 받는 것을 관장하는 프로토콜 
    - TCP보다 하위 레벨 프로토콜 
    
  - IP 주소 
    - 네트워크 상에서 유일하게 식별될 수 있는 컴퓨터 주소 
      - 숫자로 구성된 주소 
      - 4개의 숫자가 . 으로 연결 
    
    - 숫자로 된 주소는 기억하기 어려우므로 도메인 이름으로 바꿔서 사용 
    - 현재는 32비트의 IP 버전 IPv4가 사용되고 있음  
      - IP 주소 고갈로 인해 IP 버전 6인 IPv6이 점점 사용되는 추세 
      
- 포트 
  - 통신하는 프로그램 간에 가상의 연결단 포트 생성 
    - IP 주소는 네트워크 상의 컴퓨터 또는 시스템을 식별하는 주소 
    - 포트 번호를 이용하여 통신할 응용프로그램 식별 
    
  - 모든 응용프로그램은 하나 이상의 포트 생성 가능 
    - 포트를 이용하여 상대방 응용프로그램과 데이터 교환
    
- 소캣 프로그래밍 
  - TCP/IP 네트워크를 이용하여 쉽게 통신 프로그램을 작성하도록 지원하는 기반 기술 
    
  - 소켓 
    - 두 응용프로그램 간의 양방향 통신 링크의 한쪽 끝 단 
    - 소켓끼리 데이터를 주고받음 
    - 소켁은 특정 IP 포트 번호와 결합
      
  - 자바로 소켓 통신할 수 있는 라이브러리 지원 
  - 소켓 종류 : 서버 소켓과 클라이언트 소켓 
    
  - SOcket 클래스, 클라이언트 소켓 
    - Socket 클래스 
      - 클라이언트 소켓에 사용되는 클래스 
      - java.net 패키지에 포함
      
    - 클라이언트에서 소켓으로 서버에 접속하는 코드 
      - 클라이언트 소켓 생성 
        - Socket clientSocket = new Socket("IP주소", "포트번호");
        
      - 소켓으로부터 데이터를 전송할 입출력 스트림 생성 
        - BufferedReader in = new BufferedReader( new InputStreamReader(clientSocket.getInputStream()));
        - BufferedWriter out = new BufferedWriter( new OutputStreamReader(clientSocket.getOutputStream()));
        
      - 서버로 데이터 전송 
        - flush()를 호출하면 스트림 속에 데이터를 남지기 않고 모두 전송 
        - out.write("hello" + "\n");
        - out.flush(); 
      
      - 서버로부터 데이터 수신 
        - String line = in.readline();
        
      - 네트워크 접속 종료 
        - clientSocket.close(); 
    
      - 서버에 클라이언트가 연결되는 과정 
        - 서버는 서버 소켓으로 들어오는 견결 요청을 기다림 
        - 클라이언트가 서버에게 연결 요청 
        - 서버가 연결 요청 수락 
          - 새로운 클라이언트 소켓을 만들어 클라이언트와 통신하게 함 
          - 그리고 다시 다른 클라이언트의 연결을 기다림 
          
    - 서버가 클라이언트와 통신하는 과정 
      - 서버 소켓 생성 
        - 서버는 접속을 기다리는 포트로 클라이언트가 접속에 필요한 포트 번호이다.
        - ServerSocket serverSocket = new ServerSocket("포트번호");
        
      - 클라이언트로부터 접속 기다림 
        - Socket socket = serverSocket.accept();
        - accept() 메소드는 연결 요청이 오면 새로운 Socket 객체 반환 
        - 접속 후 새로 만들어진 Socket 객체를 통해 클라이언트와 통신 
        
      - 네트워크 입출력 스트림 생성 
        - BufferedReader in = new BufferedReader( new InputStreamReader(socket.getInputStream()));
        - BufferedWriter out = new BufferedWriter( new OutputStreamReader(socket.getOutputStream()));
        
  - 자바의 람다식 
    - 람다식은 익명 함수를 생성하기 위한 식 
    - 객체 지향 언어보다는 함수 지향 언어에 가까움 
    
    - ( ) -> { /* 함수 코드 작성 */ }
      - ( ) : 매개변수 리스트 
      - ->  : 화살표 연산자 
      - { } : 함수 바디
    
    - 매개변수를 출력하는 람다식 
      - ( int num ) -> { System.out.println("숫자 : " + num); }   // 기본 작성 
      - ( num ) -> { System.out.println("숫자 : " + num); }       // 자료형 생략 가능 
      - num -> System.out.println("숫자 : " + num);               // 한줄 로직은 () 와 {} 생략이 가능하다. 
      
    - 매개변수로 두 정수를 받아 출력하는 람다식 
      - ( int x, int y ) -> { System.out.println( x + ", " + y ); } 
      - ( x, y ) -> System.out.println( x + ", " + y );
      
    - Return 문을 가진 람다식 
      - ( x, y ) -> { return x + y; }   // 합을 리턴하는 람다식 
      - ( x, y ) -> return x + y;       // 오류, { } 생략이 안된다. 
      - ( x, y ) -> x + y;              // return 생략 가능
  
    - 람다식은 함수형 인터페이스를 구현한 객체임 
      - 함수형 인터페이스 작성 
        - 함수형 인터페이스란 추상 메소드 하나만 있는 인터페이스 
        - interface MyFunction { int calc(int x, int y); } 
        
      - 함수형 인터페이스의 추상 메소드를 람다식으로 구현 
        - ( x, y ) -> { return x + y; }
        
        - MyFunction f = ( x, y ) -> { return x + y; }   
        - int calc(int x, int y) { return x + y; } 
        
      - 람다식 호출 
        - System.out.println(f.calc(1,2));
        
      
- 제네릭 함수형 인터페이스 
  - interface MyFuntion<T> { void print( T x ); 
  
  - public class LambadaEx5 { 
      public static void main(String[] args) { 
        MyFunction<String> f1 = (x) -> Systme.out.println(x.toString());
        f1.print("ABC");
        
        MyFuntion<Integer> f2 = (x) -> System.out.println(x.toString());
        f2.print(Interger.value(100));
      }
    }
  
  
       
      
      
      
      
