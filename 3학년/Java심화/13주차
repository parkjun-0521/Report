- 0605
- 13주차 필기 

- 바이트 스트림으로 바이너리 파일 쓰기 
  - 바이너리 값을 파일에 저장하기 
    - FileOutputStream 클래스 이용 
    
  - 파일 출력 스트림 생성 
    - FileOutputStream fout = new FileOutputStream(" 경로 ");
  
  - 파일 쓰기 
    - write() 로 문자 하나 씩 파일에 기록 
    
  - 스트림 닫기 
    - close() 로 스트림 닫기 
    
- 바이트 스트림으로 바이너리 파일 읽기 
  - 파일 입력 스트림 생성 
    - FileInputStream fin = new FileInputStream(" 경로 ");
    
  - 파일 읽기 
    - read()로 문자 하나씩 파일에서 읽기 
    
  - 스트림 닫기 
    - close()로 스트림 닫기 
    
- File 클래스 
  - 파일의 경로명 및 속성을 다루는 클래스 
    - java.io.File
    - 파일과 디렉터리 경로명의 추상적 표현 
  
  - 파일 이름 변결, 삭제, 디레거리 생성, 크기 등 파일 관리 
  - File 객체에는 파일 읽기/쓰기 기능 없음 
    - 파일 입출력은 파일 입출력 스트림 이용 
    
  - File 객체 생성 
    - 생성자에 파일 경로명을 주어 File 객체 생성  : File f = new File(" 경로 ");
    - 디렉터리와 파일명을 나누어 생성자 호출       :  File f = new File("경로", "파일명" );
    

- 람다식
  - 람다식은 JAVA8에 도입된 문법으로 익명 함수 
  - 객체 지향 언어보다는 함수 지향 언어에 가까움 
  
- 매개변수로 정수를 받아 출력 ( 두가지 방법 ) 
  - (int x, int y) -> { System.out.println(x + y); }
  - (x, y) -> System.out.println(x + y);
  
- Return 문을 가징 람다식 
  - (x, y) -> { return x + y; }   // { } 생략 안됨 
  - (x, y) -> x + y;
  
- 람다식은 함수형 인터페이스를 구현하는 객체임 
  - 함수형 인터페이스 작성 
    - 함수형 인터페이스랑 추상 메소드 하나만 있는 인터페이스 
    - 람다식은 추상 메소드가 반드시 하나만 있어야 한다. 
    
  - 함수형 인터페이스의 추상 메소드를 람다식으로 구현
    - 함수형 인터페이스 변수 = 람다식; 
    - (x, y) -> { return x + y; }
    - MyFunction f = (x, y) -> { return x + y; } 
    - int calc(int x, int y) { return x + y; } 
    
    - 람다식 호출 
      - System.out.println(f.calc(1, 2));
  
  
  
  
  
  
  
  
  
