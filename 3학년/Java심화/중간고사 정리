- 0409
- 중간고사 정리 

* 2장 PPT 
- 자바의 최상위 클래스는 Object 클래스이다. 
- Swing 클래스는 JComponent에서 파생되었다. 

- 컨테이너 
  - 다른 컴포넌트를 포함할 수 있는 GUI 컴포넌트 
    - java.awt.Container를 상속 받는다. 
  - 다른 컨테이너에 포함될 수 있음 
    - AWT 컨테이너    : Panel, Frame, Applet, Dialog, Window 
    - Swing 컨테이너  : JPanel, JFrame, JApplet, JDialog, JWindow 
    
- 컴포넌트 
  - 컨테이너에 포함되어야 화면에 출력될 수 있는 GUI 객체
  - 다른 컴포넌트를 포함할 수 없는 순수 컴포넌트 
  - 모든 GUI 컴포넌트가 상속 받는 클래스  : java.awt.Component
  - 스윙 컴포넌트가 상속받는 클래스       : javax.swing.Component
  
- 최상위 컨테이너 
  - 다른 컨테이너에 포함되지 않고도 화면에 출력되며 독립적으로 존재 가능한 컨테이너 
  
- 스윙 프레임 
  - JFrame을 상속받아 구현 
  - 컴포넌트들은 화면에 보이려면 스윙 프레임에 부착되어야 함 
- 스윙 프레임 기본 구성 
  - 프레임 : 스윙 프로그램의 기본 틀
  - 메뉴바 : 메뉴들이 부착되는 공간 
  - 컨텐트팬 : GUI 컴포넌트들이 부착되는 공간 

- 프레임 만들기 
  - JFrame 클래스를 상속 받은 클래스 작성 
  - 프레임의 크기는 반드시 지정 : setSize(가로, 세로) 호출 
  - 프레임을 화면에 출력하는 코드 반드시 필요 : setVisible(true) 호출 
  - 프레임의 이름 지정 : setTitle(" ") 또는 super(" ") 호출 
  
- 프레임에 컴포넌트 붙이기 
  - 컨텐트팬 알아내기 
    ★ Container 컨테이너명 = getComtentPane();
    - 디폴트 컨텐트팬 
  - 컨텐트팬에 부착하기 
    - 컨테이너명.add(부착할 오브젝트);
  
- 스윙 응용프로그램 종료 
  - 응용프로그램 내에서 스스로 종료 
    ★ System.exit(0);
  - 프레임의 오른쪽 상단의 종료버튼이 클릭되었을 때 
    - 프레임 종료, 프레임 윈도우를 닫음 
    - 프레임이 보이지 않게 되지만 응용프로그램이 종료된것은 아니다. 
    - 다시 setVisible(true)를 호출하면 보이게 된다.
  - 따라서 종료할때는 
    ★ setDefauletCloseOperation(JFram.EXIT_ON_CLOSE);

- 배치관리자    
  - FlowLayout 배치관리자 
    - 컴포넌트가 삽입되는 순서대로 왼쪽에서 오른쪽으로 배치 
    - 배치할 공간이 없으면 아래로 내려와서 반복한다. 
  - BorderLayout 배치관리자
    - 컨테이너의 공간을 동(EAST), 서(WEST), 남(SOUTH), 북(NORTH), 중앙(CENTER) 의 5개의 영역으로 나눈다.
    - 5개 영역 중 프로그램 내에서 지정한 위치에 배치 
  - GridLayout 배치관리자 
    - 컨테이너를 동일한 크기의 2차우너 격자로 나눔 
    - 컴포넌트의 삽입 순서는 좌에서 우, 위에서 아래로 배치 
  - CardLayout 배치관리자 
    - 컨테이너의 공간에 카드를 쌓아 놓은 듯이 컴포넌트를 포개어 배치 
  
- 컨테이너에 새로운 배치관리자 설정 
  - setLayout( LayoutManager lm ) 메소드 호출 
  - ex) JPanel p = new JPanel();
        p.setLayout(new BorderLayout());  // JPanel에 BorderLayout 설정

- FlowLayout 배치관리자
  - FlowLayout()
  - FlowLayout( 정렬, 가로 간격, 세로 간격 ) 

- Borserlayout 배치관리자
  - BorderLayout()
  - BorderLayout( 가로 간격, 세로 간격 )
  
  - add () 메소드 
    - void add(Component comp, int index)
    - comp 컴포넌트를 index 위치에 삽입한다.
    - BorderLayout.EAST | BorderLayout.WEST | BorderLayout.SOUTH | BorderLayout.NORTH | BorderLayout.CENTER
  
- GridLayout 배치관리자
  - GridLayout()
  - GridLayout( 행, 열 ) 
  - GridLayout( 행, 열, 가로 간격, 세로 간격 ) 
  
- 배치관리자가 없는 컨테이너 
  - 컴포넌트의 크기나 위치를 개발자 임의로 결정하고자 하는 경우 
  - 여러 컴포넌트들이 서로 겹쳐 출력하고자 하는 경우 
  
  - 없애는 법 
    - container.setLayout(null)
    
  - 컴포넌트의 크기와 위치 설정 
    - void setSize( 가로, 세로 )   // 컴포넌트 크기 설정 
    - void SetLocation( x, y )    // 컴포넌트 위치 설정 
    - void setBounds(int x, int y, int width, int height )  // 위치와 크기를 동시에 설정 
  
* 3장 PPT
- 이벤트 기반 프로그래밍 
  - 이벤트 발생에 의해 프로그램의 흐름이 결정 
  
  - 이벤트가 처리되는 과정 
    ★ 이벤트 발생 
      - ex) 마우스 움직임 혹은 키보드 입력
    ★ 이벤트 객체 생성 
      - 현재 발생한 이벤트에 대한 정보를 가진 객체 
    ★ 응용프로그램에 작성된 이벤트 리스너 찾기
    ★ 이벤트 리스너 실행 
      - 리스너에 이벤트 객체 전달 
      - 리스너 코드 실행 

- 이벤트 객체 
  - 발생한 이벤트에 관한 정보를 가진 객체 
  - 이벤트 리스너에 전달됨 
  
  - 이벤트 객체가 포함하는 정보 
    - 이벤트 종류와 이벤트 소스 
    - 이벤트가 발생한 화면의 좌표, 컴포넌트 좌표 
    - 버튼이나 메뉴의 문자열 
    - 마우스 버튼, 마우스 클릭횟수 
    - 키의 코드와 문자 값 
    - 체크박스, 라디오 버튼 등과 같은 체크 상태 
  
  - 이벤트 소스를 알아 내는 메소드 
    - e.getSource();
      - 발생한 이벤트의 소스 컴포넌트를 리턴 
      - Object 타입으로 리턴하므로 캐스팅하여 사용 
      - 모든 이벤트 객체에 대해 적용
  
- 이벤트 객체, 이벤트 소스 ( 리스너 인터페이스 ) 
  - ActionListener : JButton, JMenuItem, JTextField
  - ItemListener   : JCheckBox, JRadioButton, JCheckBoxMenuItem
  - ListSelectionListener : JList
  - KeyListener    : Component 
  - MouseListener  : Component
  - FocuseListener : Component
  - TextListener   : TextField, TextArea
  - WindowListener : Window
  
- 이벤트 리스너 작성 과정 ( ActionListener라고 가정 ) 
  - 이벤트와 이벤트 리스너 선택 
    - 무슨 이벤트를 사용할 것인가 그거에 맞는 이벤트 리스너를 선택 
    - ActionListener 사용 
  - 이벤트 리스너 클래스 작성 
    - 이벤트 인터페이스 구현 
    - class MyListener implements ActionListener{ } 
  - 이벤트 리스너 등록 
    - 이벤트를 처리하고자 하는 컴포넌트에 이벤트 리스너 등록 
    - ActionListener listener = new MyListener();
    - bnt.addActionListener(listener)

- 이벤트 리스너 작성 방법 
  - 독립 클래스 작성 
    - 이벤트 리스너를 완전한 클래스로 작성 
    - 이벤트 리스너를 여러 곳에서 사용할 때 적합 
    
  - 내부 클래스 작성
    - 클래스 안에 멤버처럼 클래스 작성 
    - 이벤트 리스너를 특정 클래스에서만 사용할 때 적합 
    
  - 익명 클래스 작성 
    - 클래스의 이름 없이 간단히 리스너 작성 
    - 클래스 조차 만들 필요 없이 리스너 코드가 간단한 경우에 적합 

- 어댑터 클래스 
  - 리스너의 모든 메소드를 단순 리턴하도록 만든 클래스 
  - KeyAdapter
  - MouseAdapter
  - MouseMotionAdapter
  - FocuseAdapter
  - 이정도만 알고 있으면 될 꺼 같다.
  
  
  
  
  
  
  
