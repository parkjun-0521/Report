- 0324
- 4주차 수업  ( 집가서 안드로이드 스튜디오 설치 ) 
★ 시험 방식은 코드를 보고 이게 무슨 코드인지 해석하는 문제로 나올 가능성이 크다. 

- 프로젝트 불러올때 에러가 발생할 시 
- invalidate cashes.. 를 해서 불러오기 ( 이전 파일을 다 날리고 가져오는 것 ) 

- 단위 
- dp : 화면 단위
- sp : 글씨 단위 

- 안드로이드 스튜디오 프로젝트 구성 ( ★은 필수적으로 알고 있으면 좋다 ) 
★ manifests
  - AndroidManifest.xml - 애플리케이션 수행에 필요한 필수 정보 ( 어플리케이션에 관련된 필수 명세서가 들어가 있음 ) 
                        - 구성 요소가 반드시 포함되어 있어야 프로그램이 돌아간다. 
★ java ( 기능 구현 )
  - 소스코드
  - androidTest : 안드로이드 모듈을 테스트하기 위해 필요 
  - test : 자바 모듈쪽 테스트를 하기 위해 필요
  - generated : 오류를 잡기 위해 필요 
  
★ res ( 자원 ) 
  - 각종 리소스 저장 폴더
  - 레이아웃, 그림, 문자열 등의 리소스 저장
  - drawable: 그려질 수 있는 객체 (이미지)
  - layout : 레이아웃 (화면 디자인), 화면 구성 형태, 관련 내용 저장
  - mipmap : 앱 아이콘이 배치
  - values : 문자열, 배열, 색상, 스타일 등
  
- Gradle Script
  - 빌드 스크립트
  - 외부에서 다른 사람들이 만든 것을 여기에 작성하기도 한다. 
  
- AndroidManifest.xml ( PPT 1장 59쪽 ) 
  - 애플리케이션의 이름, 버전 등의 정보를 저장 
  - 애플리케이션에 적재된 모든 컴포넌트에 대하여 기술하는 파일 
  - 애플 사용시 권한 등 이런것을 여기에 작성 한다.
  
- 레이아웃 : layout/ ....xml 
  - 사용자 인터페이스 작성
  - androidx : 시간이 지나고 나온 안드로이드 기능들을 추가 
  
  - match_patent : 부모 객체 기준으로 ( 부모 객체의 크기가 MAX, 부모크기가 200*200 이면 최대 200*200 까지 사용 가능 )  
  - wrap_content : 필요한 만큼 ( 내가 필요한 만큼만 사용을 하겠다 )
  - 이렇게 크기를 만드는 이유 : 사용자들의 폰의 크기도 다르고 각 폰의 해상도도 다르기 때문에 위와 같은 크기로 지정을 한다. 
  - <(꺽세) 다음에 나오는게 태그이다. 

- 안드로이드 기본 레이아웃 실행 코드 설명 
  - AppCompatActivity 를 상속 받음 
  - setContentView(R.layout.activity_main) : 눈에 보이는 뷰를 설정해라 ( 괄호 안에 있는 레이아웃을 가져와라 ) 
 
=======================================================================================================================
실습 관련
=======================================================================================================================  
- 액티비티 스택 ( PPT 2장 p.6 ) 
  - A화면 실행후 B화면으로 넘어갔을 때 A화면은 정지 상태 
  - 앞의 화면으로 바꼈을 때 이전 화면은 자원을 반납하고 정지상태로 바뀐다. 
  - B화면을 종료 하면 이전 화면인 A화면은 다시 활성화가 된다.
  - 화면은 액티비티 단위로 관리 
  - Task 
    - 하나의 어플리케이션에서 다른 앱을 실행할 수 있음 => ( A 실행중 지도라는 B를 실행 하는경우 ) A는 멈춰있고 B가 화면에 보여짐 
    - 이때 2개의 작업이 실행되는 것이 아닌 1개의 Task가 실행 되는것 
    - 어플리케이션은 Task단위로 관리한다. 
  - '액티비티 스택'을 통해서 관리
  - 액티비티도 효율적인 메모리 관리를 위하여 액티비티 생성 및 소멸 과정인 생명주기가 있음 

- 액티비티 생명주기 ( PPT 2장 p.9 ) 
  - Activity launched 가 먼저 실행 
  - Activity running 실행 
    - 이후 onPause() 일시 멈춤으로 가거나 ( 앞에 프로그램이 꺼지면 다시 보여줘야 하기때문에 onCreate() 로 가는 것 ) 
    - onStop() 으로 완전히 멈추거나 ( A 프로그램이 실행 중 B 프로그램 실행 하면 A는 완전히 스탑, 메모리를 반납 ) 
      - 보통 앱이 화면에서 안보이면 onStop() 으로 빠진다고 생각하면 된다. 
      - 이후 완전히 종료 하는 App process killed를 하거나 
      - 다시 실행 하기 위해 onRestart() 를 한다. 
  - Activity shut down 어플리케이션 종료  

- 리소스 
  - 애플리케이션 = 기능 + 리소스 
  - 수정 X, 읽기 전용 
  - 유지보수가 용이하다 
  - 언어와 문화권에 맞는 애플리케이션의 현지화 
  
- 리소스 저장 
  - 리소스에는 절대 대문자를 쓰지 않는다, 특수문자는 당연히 안됨 
  - 하위 디렉토리 이름은 '소문자' + '숫자' + '밑줄'로만 구성 
  - aapt가 리소스를 모두 파악하여 자원을 접근하기 위한 변수의 정의를 담은 ~/gen/R.java 파일을 생성 ( R.java는 건들이면 프로그램 삭제해야됨 )

- 리소스 종류 ( PPT 2장 p.17,18 ) 기본적으로 이정도는 알고 있어야 한다.
  - values    : 문자열, 문자열 배열, 색상 값, 크기, 단순 표시, 스타일 및 테마 
  - drawable  : 그래픽 
  - anim      : 애니메이션
  - menu      : 메뉴 
  - xml       : XML
  - raw       : 원본
  - layout    : 레이아웃
  - mipmap    : 아이콘 

- 리소스에 접근을 해서 값을 가져오는 방식이 좋다. ( PPT 2장 p.19 ) 
  - 
  
------------------------------------------------------------------------------------------------------------ 
유니티 수정 할꺼 


- 채팅 치는 도중에 점프 막기 


- 웹뷰 파괴 Destroy() 로 파괴해보기  ( Dispose() 사용하기 ) 
- 웹뷰를 완전히 삭제를 할 것인가, 아니면 비활성화만 할 것인가 결정 
- 웹뷰 크기 Resize() 로 크기 지정 => 기본 해상도 Resolution 으로 해상도 조정 ( 기본이 1300으로 되어있는거 난 400								   으로 바꿀 예정임 ) 
- 돌아가기 버튼 GoBack() 함수 사용 해보기, 앞으로 가기 버튼 GoForward() 함수 사용 
- LoadHtml 로 동기화 하기 ( 기존에는 LoadURL로 동기화를 했는데 내부에서 RPC를 막은 느낌임 일단 해보기 ) 
- 동기화 후에 webViewPrefab.WebView.Reload(); 사용하여 reload 한번 해보기 


