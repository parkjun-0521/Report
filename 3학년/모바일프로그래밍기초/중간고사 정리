  - 시험 범위 
    - 안드로이드 수업자료 1번 page.56 프로젝트 구조 설명 부터 ~ 
    - 안드로이드 수업자료 2번 액티비티/리소스, 기능/실습 2,3번  ( 액티비티/리소스는 빠질 수 도 있음 )
    - 안드로이드 수업자료 3번 기능/실습4
    - ( 액티비티/리소스 )
    
  - 시험 범위 제외 
    - 1장 안드로이드 소개, 설치, 에뮬레이터 설정 부분 제외 ( page.56 이전꺼 제외 ) 
    - 2장 '액티비티/리소스 부분에서 액티비티 생명주기와 콜백메소드 부분 ( page.9 ~ 11 )과 리소스 형식 (page.19) 부분만 시험에 포함될' 예정 나머지는 안나옴 
    - 3장 기능/실습 5번 제외 
    
  - 시험 문제 유형 
    - 모든 문제는 주관식, 서술형 문제 출제 예정 ( 설명을 하는 문제 ) 
    - 클래스, 메소드, 레이아웃, 프로그램을 작성하기 위한 개념등, 프로그램을 개발하기 위해 알고 있어야 된다고 판단되는 내용을 중심으로 출제 예정 
    - 소스코드를 주고 이게 무슨 코드인지 해석하는 방식으로 출제 예정 
    - 부분 코드 해석문제가 포함될 수 있음 ( 1문제 예상 )
    - 코드 작성문제는 없음 
    
시험 범위 :
     - 안드로이드 수업자료 1번 page.56 ~ 프로젝트 구조 설명부터 ~
     - 안드로이드 수업자료 2번 액티비티/리소스, 기능/실습 2, 3번
     - 안드로이드 수업자료 3번 기능/실습 4, 
시험범위 제외 부분 :
     - 1장 안드로이드 소개, 설치, 에뮬레이터 설정 관련 부분 제외
     - 2장 : 액티비티/리소스 부분에서 액티비티 생명주기와 콜백메소드 부분과
                 리소스 형식(page.19) 부분만 시험에 포함될 예정
     - 3장 : 기능/실습 5번은 14일 수업 이후에 최종 확정 예정
시험문제 유형 :
- 모든 문제는 주관식, 서술형 문제로 출제 예정
- 클래스, 메소드, 레이아웃, 프로그램을 작성하기 위한 개념 등, 프로그램을
   개발하기 위해 알고 있어야 된다고 판단되는 내용을 중심으로 출제 예정   
----------------------------------------------------------------------------------------------------------------------------------------

- 0408
- 중간고사 정리 

* 1장 page.56 이후 내용 
- 프로젝트 구조 ( manifests, java, res 외우기 ) 
  - manifests : 애플리케이션 수행에 필요한 필수 정보 
  - java      : 소스코드, 단위 테스트등을 위해 필요 
  - res       : 각종 리소스 저장 폴더 ( resources ) 
                레이아웃, 그림, 문자열 등의 리소스 저장 
                layout : 레이아웃 ( 화면디자인 ), 화면 구성 형태, 관련 내용 저장 
  - Gradle Script : 빌드 스크립트 
  
★ manifests 
  - 애플리케이션의 이름, 버전 등의 정보 저장 
  - 애플리케이션에서 선언한 구성 요소, 기능, 요구사항 등에 대하여 기록하는 파일, 애플리케이션에 적재된 모든 컴포넌트에 대하여 기술하는 파일 
  - 외부 라이브러리에 대한 정의 포함 
  
  - 내부 코드 설명 
    ★ android:label = " " 
      - 사용 아이콘, 타이틀 라벨 등 
    ★ android:name = ".Main"
      - 클래스 이름 정의, 정의되지 않은 액티비티는 실행 불가 ( 여기서 클래스 이름은 Main 인것이다. )
    ★ <intent-filter> 
      - 액티비티를 동작시키는 인텐트 결정 
  
★ layout ( 레이아웃 ) 
  - 사용자 인터페이스 작성 
  
  - 내부 코드 설명
    ★ View의 넓이 및 높이 지정 
      - match_parent : 부모 객체 기준으로 
      - wrap_content : 필요한 만큼 

    ★ android:text =" "
      - TextView가 가지는 메시지 지정 

    ★ </androidx.constraintlayout.widget.ConstraintLayout>
      - 안드로이드 속성을 정의한 네임스페이스 ( 제공하는 레이아웃이 여러 종류 ( Linearlayout, Framelayout, Relativelayout 등등 ) 

★ Java 
  - public class MainActivity extends AppCompatActivity { }
    - 기본 액티비티 생성, 여러 액티비티 존재 가능, AppCompatActivity에서 상속해서 사용 
    
  - protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
  } 
    - onCreate() : 어플리케이션 실행 
    - onCreate() 메소드가 호출되면서 액티비티 생성 
    - super.onCreate() : 상위 클래스의 onCreate() 메소드를 호출하여 정의된 작업을 수행 
    - setContentView() : 액티비티 화면을 구성하는 역할 
                         화면에 표시할 뷰를 설정, 제공 리소스 이용 ( R.layout.activity_main )


* 2장 
- 액티비티 생명주기 
  - 액티비티는 액티비티 스택을 통해서 관리 
  - 액티비티의 3가지 상태 
    ★ 활성 혹은 실행 상태  ( avtive 또는 running ) 
      - 전경 화면에 있을 경우 
      - 해당 액티비티가 사용자 동작에 대한 초점을 가짐 
      - 사용자와 상호작용 
      
    ★ 중지 상태 ( paused ) 
      - 초점을 보유하지 않았지만 사용자에게 일부 보임 
      - 메모리가 극도로 부족할 경우 시스템에 의하여 강제 종료 
      - 사용자와 상호작용 불가 
    
    ★ 정지 상태 ( stopped )
      - 사용자에게 전혀 보이지 않지만 여전히 모든 상태와 멤버 정보 유지 
      - 다른 컴포넌트가 메모리를 요청하면 시스템에 의하여 강제 종료 
    
   ★ 생명 주기 사이클 
    - onCreate() -> onStart() -> onResume() -> runnitg상태 -> 'onPause()' -> 'onStop()' -> onDestroy() -> shut down상태
    - onPause() 상태에서 onResume90() 상태로 갈 수도 있지만 보통은 onStop() 으로 간다고 함 => 이런 경우가 화면위에 작게 팝업창으로 띄워져 있는경우를 말함 
    - onStop() 상태에서 onRestart() 상태로 갈 수도 있음 이후 onStart() 로 가서 다시 실행 => 앱을 종료하지 않고 백그라운드로 넣어놨을 떄 상황인거 같음 
    
- 액티비티를 위한 콜백 메소드
  ★ onCreate()
    - 액티비티가 생성될 때 처음으로 호출되는 메소드 
    - 전역 상태의 모든 리소스를 초기화 ( layout 과 date, binding 등을 초기화 )
    - 액티비티는 기본적으로 위젯들이 배치되어 있는 레이아웃을 구성하고, 위젯들이 사용자와 상호작용을 하는 코드를 포함  
  - onStart() 
    - 액티비티가 초기화 과정을 마친 후 사용자에게 보여줄 준비가 되었을 때 호출  
  ★ onResume()
    - 액티비티가 사용자에게 보여지고 사용자의 입력을 처리할 수 있음 
    - 액티비티 스택의 최상위에 위치 
  ★ onPause()
    - 사용자와 상호작용을 중지 
    - 액티비티 종료 등을 대비해 상태를 '저장'하는 등의 작업을 수행 
  ★ onStop() 
    - 더 이상 액티비티가 사용자에게 보이지 않음 
    - 더 이상 액티비티 스택의 최상위에 위치하지 않음 
  - onDestroy()
    - 존재하는 모든 리소스를 해제
    - 시스템 내에 액티비티가 존재하지 않게 됨 
  - onRestart()
    - onStart() 메소드 호출 이후 정지 상태에 있던 액티비티를 다시 화면에 표시할 때 호출 
    
- 액티비티 상태 저장하기 
  ★ 일반적으로 정지된 액티비티는 사용자가 다시 사용할 것을 대비하여 '메모리에 상주'
  ★ 만약 메모리가 '부족하게' 되면 '강제 종료' 
  - 액티비티를 다시 호출 하면 
    - 강제 종료된 상태 : '다시 액티비티를 생성'한 후 액티비티를 실행 
    - 강제 종료되지 않은 상태 : 액티비티를 다시 만들 필요가 없고 액티비티를 '다시 시작'하여 화면에 표시 
  
  - onSaveInstanceState()
    - onPause() 혹은 onStop() 이후 메모리가 부족할 경우 프로세스가 메모리에서 제거될 수 있음 
    - 메모리에서 제거되기 전 액티비티 상태를 기록할 수 있는 'Bundle 오브젝트'를 가짐  
  - onRestoreInstanceState()
    - onCreate() 혹은 onState() 이후 저장된 액티비티 상태를 복원 
    
  - onSaveInstanceState() 와 onRestoreInstanceState()는 생명주기 메소드가 아니다.
  - 따라서 항상 호출되지 않는다. 개발자가 해당 코드의 메소드를 재정의하여 구현 
  
  - 매개변수로 사용되는 savedInstanceState는 저장된 인스턴스의 상태, 즉 액티비티의 UI 상태를 의미 

★ 리소스 형식 

  - 속성 애니메이션 : 'animator'
    - Property Animation 관련 정보가 설정된 xml 파일 
    - Property Animation 시스템은 거의 모든 항목을 애니메이션으로 만들 수 있음 
    - 객체의 속성을 애니메이션으로 보여줄 수 있으며 기존 애니메이션 보다 더 강력한 기능을 제공 
    
  - 애니메이션 : 'anim'
    - 애니메이션 정보가 설정된 xml 파일
    - 회전, 크기 확대 축소, 알파값 등의 효과를 뷰에 적용하기 위해 만든 정보 
    - <set>, <alpha>, <scale>, ...
    
  - 색상 상태 목록 : 'color'
    - Color state List Resource를 정의하는 xml 파일 
    - 색상이 적용되는 View 객체의 상태에 따라 색상을 변경함 
    - xml 파일에 상태 목록을 설명할 수 있으며 단일 <selector> 요소 내에 <item> 요소에 정의 
    
  - 그래픽 : 'drawable'
    - 비트맵, 나인 패치, xml 등
    
  - 앱 아이콘 : 'mipmap'
    - 런처 아이콘 
    
  - 레이아웃 : 'layout'
    - 레이아웃을 정의 하는 xml 파일 
    
  - 메뉴 : 'menu'
    - 옵션 메뉴, 컨텍스트 메뉴 또는 하위 메뉴 등과 같은 앱 메뉴를 정의하는 xml 파일 ( <menu>, <item> 등 ) 
    
  - 원본 : 'raw'
    - 원시 형태로 저장하기 위한 임의의 파일
    
  - 폰트 : 'font'
    - ttf, otf 또는 .ttf 확장자가 붙은 글꼴 파일이나 <font-family> 요소를 포함한 xml 파일 
    
  - XML : 'xml'
    - Resources.getXML()을 호출하여 런타임에 읽을 수 있는 임의의 xml 파일
    - 다양한 xml 구성 파일을 여기에 저장
    
  - 문자열 : 'values'
    - strings.xml, 문자열 관리
    
  - 문자열 배열 : 'values'
    - arrays.xml 등 리소스 배열 
    
  - 색상 값 : 'values'
    - colors.xml 색상 정보 
    
  - 크기 : 'values' 
    - dimens.xml, <dimens>
    
  - 스타일 및 테마 : 'valules'
    - styles.xml, themes.xml 


* 3장 
- 안드로이드 실습한거 보기 ( Ex02 )































































-
-


