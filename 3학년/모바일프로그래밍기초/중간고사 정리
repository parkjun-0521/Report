  - 시험 범위 
    - 안드로이드 수업자료 1번 page.56 프로젝트 구조 설명 부터 ~ 
    - 안드로이드 수업자료 2번 액티비티/리소스, 기능/실습 2,3번  ( 액티비티/리소스는 빠질 수 도 있음 )
    - 안드로이드 수업자료 3번 기능/실습4
    - ( 액티비티/리소스 )
    
  - 시험 범위 제외 
    - 1장 안드로이드 소개, 설치, 에뮬레이터 설정 부분 제외 ( page.56 이전꺼 제외 ) 
    - 2장 '액티비티/리소스 부분에서 액티비티 생명주기와 콜백메소드 부분 ( page.9 ~ 11 )과 리소스 형식 (page.18) 부분만 시험에 포함될' 예정 나머지는 안나옴 
    - 3장 기능/실습 5번 제외 
    
  - 시험 문제 유형 
    - 모든 문제는 주관식, 서술형 문제 출제 예정 ( 설명을 하는 문제 ) 
    - 클래스, 메소드, 레이아웃, 프로그램을 작성하기 위한 개념등, 프로그램을 개발하기 위해 알고 있어야 된다고 판단되는 내용을 중심으로 출제 예정 
    - 소스코드를 주고 이게 무슨 코드인지 해석하는 방식으로 출제 예정 
    - 부분 코드 해석문제가 포함될 수 있음 ( 1문제 예상 )
    - 코드 작성문제는 없음 
    
시험 범위 :
     - 안드로이드 수업자료 1번 page.56 ~ 프로젝트 구조 설명부터 ~
     - 안드로이드 수업자료 2번 액티비티/리소스, 기능/실습 2, 3번
     - 안드로이드 수업자료 3번 기능/실습 4, 
시험범위 제외 부분 :
     - 1장 안드로이드 소개, 설치, 에뮬레이터 설정 관련 부분 제외
     - 2장 : 액티비티/리소스 부분에서 액티비티 생명주기와 콜백메소드 부분과
                 리소스 형식(page.19) 부분만 시험에 포함될 예정
     - 3장 : 기능/실습 5번은 14일 수업 이후에 최종 확정 예정
시험문제 유형 :
- 모든 문제는 주관식, 서술형 문제로 출제 예정
- 클래스, 메소드, 레이아웃, 프로그램을 작성하기 위한 개념 등, 프로그램을
   개발하기 위해 알고 있어야 된다고 판단되는 내용을 중심으로 출제 예정   
----------------------------------------------------------------------------------------------------------------------------------------

- 0408
- 중간고사 정리 

* 1장 page.56 이후 내용 
- 프로젝트 구조 ( manifests, java, res 외우기 ) 
  - manifests : 애플리케이션 수행에 필요한 필수 정보 
  - java      : 소스코드, 단위 테스트등을 위해 필요 
  - res       : 각종 리소스 저장 폴더 ( resources ) 
                레이아웃, 그림, 문자열 등의 리소스 저장 
                layout : 레이아웃 ( 화면디자인 ), 화면 구성 형태, 관련 내용 저장 
  - Gradle Script : 빌드 스크립트 
  
★ manifests 
  - 애플리케이션의 이름, 버전 등의 정보 저장 
  - 애플리케이션에서 선언한 구성 요소, 기능, 요구사항 등에 대하여 기록하는 파일, 애플리케이션에 적재된 모든 컴포넌트에 대하여 기술하는 파일 
  - 외부 라이브러리에 대한 정의 포함 
  
  - 내부 코드 설명 
    ★ android:label = " " 
      - 사용 아이콘, 타이틀 라벨 등 
    ★ android:name = ".Main"
      - 클래스 이름 정의, 정의되지 않은 액티비티는 실행 불가 ( 여기서 클래스 이름은 Main 인것이다. )
    ★ <intent-filter> 
      - 액티비티를 동작시키는 인텐트 결정 
  
★ layout ( 레이아웃 ) 
  - 사용자 인터페이스 작성 
  
  - 내부 코드 설명
    ★ View의 넓이 및 높이 지정 
      - match_parent : 부모 객체 기준으로 
      - wrap_content : 필요한 만큼 

    ★ android:text =" "
      - TextView가 가지는 메시지 지정 

    ★ </androidx.constraintlayout.widget.ConstraintLayout>
      - 안드로이드 속성을 정의한 네임스페이스 ( 제공하는 레이아웃이 여러 종류 ( Linearlayout, Framelayout, Relativelayout 등등 ) 

★ Java 
  - public class MainActivity extends AppCompatActivity { }
    - 기본 액티비티 생성, 여러 액티비티 존재 가능, AppCompatActivity에서 상속해서 사용 
    
  - protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
  } 
    - onCreate() : 어플리케이션 실행 
    - onCreate() 메소드가 호출되면서 액티비티 생성 
    - super.onCreate() : 상위 클래스의 onCreate() 메소드를 호출하여 정의된 작업을 수행 
    - setContentView() : 액티비티 화면을 구성하는 역할 
                         화면에 표시할 뷰를 설정, 제공 리소스 이용 ( R.layout.activity_main )


* 2장 
- 액티비티 생명주기 
  - 액티비티는 액티비티 스택을 통해서 관리 
  - 액티비티의 3가지 상태 
    ★ 활성 혹은 실행 상태  ( avtive 또는 running ) 
      - 전경 화면에 있을 경우 
      - 해당 액티비티가 사용자 동작에 대한 초점을 가짐 
      - 사용자와 상호작용 
      
    ★ 중지 상태 ( paused ) 
      - 초점을 보유하지 않았지만 사용자에게 일부 보임 
      - 메모리가 극도로 부족할 경우 시스템에 의하여 강제 종료 
      - 사용자와 상호작용 불가 
    
    ★ 정지 상태 ( stopped )
      - 사용자에게 전혀 보이지 않지만 여전히 모든 상태와 멤버 정보 유지 
      - 다른 컴포넌트가 메모리를 요청하면 시스템에 의하여 강제 종료 
    
   ★ 생명 주기 사이클 
    - onCreate() -> onStart() -> onResume() -> runnitg상태 -> 'onPause()' -> 'onStop()' -> onDestroy() -> shut down상태
    - onPause() 상태에서 onResume90() 상태로 갈 수도 있지만 보통은 onStop() 으로 간다고 함 => 이런 경우가 화면위에 작게 팝업창으로 띄워져 있는경우를 말함 
    - onStop() 상태에서 onRestart() 상태로 갈 수도 있음 이후 onStart() 로 가서 다시 실행 => 앱을 종료하지 않고 백그라운드로 넣어놨을 떄 상황인거 같음 
    
- 액티비티를 위한 콜백 메소드
  ★ onCreate()
    - 액티비티가 생성될 때 처음으로 호출되는 메소드 
    - 전역 상태의 모든 리소스를 초기화 ( layout 과 date, binding 등을 초기화 )
    - 액티비티는 기본적으로 위젯들이 배치되어 있는 레이아웃을 구성하고, 위젯들이 사용자와 상호작용을 하는 코드를 포함  
  - onStart() 
    - 액티비티가 초기화 과정을 마친 후 사용자에게 보여줄 준비가 되었을 때 호출  
  ★ onResume()
    - 액티비티가 사용자에게 보여지고 사용자의 입력을 처리할 수 있음 
    - 액티비티 스택의 최상위에 위치 
  ★ onPause()
    - 사용자와 상호작용을 중지 
    - 액티비티 종료 등을 대비해 상태를 '저장'하는 등의 작업을 수행 
  ★ onStop() 
    - 더 이상 액티비티가 사용자에게 보이지 않음 
    - 더 이상 액티비티 스택의 최상위에 위치하지 않음 
  - onDestroy()
    - 존재하는 모든 리소스를 해제
    - 시스템 내에 액티비티가 존재하지 않게 됨 
  - onRestart()
    - onStart() 메소드 호출 이후 정지 상태에 있던 액티비티를 다시 화면에 표시할 때 호출 
    
- 액티비티 상태 저장하기 
  ★ 일반적으로 정지된 액티비티는 사용자가 다시 사용할 것을 대비하여 '메모리에 상주'
  ★ 만약 메모리가 '부족하게' 되면 '강제 종료' 
  - 액티비티를 다시 호출 하면 
    - 강제 종료된 상태 : '다시 액티비티를 생성'한 후 액티비티를 실행 
    - 강제 종료되지 않은 상태 : 액티비티를 다시 만들 필요가 없고 액티비티를 '다시 시작'하여 화면에 표시 
  
  - onSaveInstanceState()
    - onPause() 혹은 onStop() 이후 메모리가 부족할 경우 프로세스가 메모리에서 제거될 수 있음 
    - 메모리에서 제거되기 전 액티비티 상태를 기록할 수 있는 'Bundle 오브젝트'를 가짐  
  - onRestoreInstanceState()
    - onCreate() 혹은 onState() 이후 저장된 액티비티 상태를 복원 
    
  - onSaveInstanceState() 와 onRestoreInstanceState()는 생명주기 메소드가 아니다.
  - 따라서 항상 호출되지 않는다. 개발자가 해당 코드의 메소드를 재정의하여 구현 
  
  - 매개변수로 사용되는 savedInstanceState는 저장된 인스턴스의 상태, 즉 액티비티의 UI 상태를 의미 

★ 리소스 형식 

  - 속성 애니메이션 : 'animator'
    - Property Animation 관련 정보가 설정된 xml 파일 
    - Property Animation 시스템은 거의 모든 항목을 애니메이션으로 만들 수 있음 
    - 객체의 속성을 애니메이션으로 보여줄 수 있으며 기존 애니메이션 보다 더 강력한 기능을 제공 
    
  - 애니메이션 : 'anim'
    - 애니메이션 정보가 설정된 xml 파일
    - 회전, 크기 확대 축소, 알파값 등의 효과를 뷰에 적용하기 위해 만든 정보 
    - <set>, <alpha>, <scale>, ...
    
  - 색상 상태 목록 : 'color'
    - Color state List Resource를 정의하는 xml 파일 
    - 색상이 적용되는 View 객체의 상태에 따라 색상을 변경함 
    - xml 파일에 상태 목록을 설명할 수 있으며 단일 <selector> 요소 내에 <item> 요소에 정의 
    
  - 그래픽 : 'drawable'
    - 비트맵, 나인 패치, xml 등
    
  - 앱 아이콘 : 'mipmap'
    - 런처 아이콘 
    
  - 레이아웃 : 'layout'
    - 레이아웃을 정의 하는 xml 파일 
    
  - 메뉴 : 'menu'
    - 옵션 메뉴, 컨텍스트 메뉴 또는 하위 메뉴 등과 같은 앱 메뉴를 정의하는 xml 파일 ( <menu>, <item> 등 ) 
    
  - 원본 : 'raw'
    - 원시 형태로 저장하기 위한 임의의 파일
    
  - 폰트 : 'font'
    - ttf, otf 또는 .ttf 확장자가 붙은 글꼴 파일이나 <font-family> 요소를 포함한 xml 파일 
    
  - XML : 'xml'
    - Resources.getXML()을 호출하여 런타임에 읽을 수 있는 임의의 xml 파일
    - 다양한 xml 구성 파일을 여기에 저장
    
  - 문자열 : 'values'
    - strings.xml, 문자열 관리
    
  - 문자열 배열 : 'values'
    - arrays.xml 등 리소스 배열 
    
  - 색상 값 : 'values'
    - colors.xml 색상 정보 
    
  - 크기 : 'values' 
    - dimens.xml, <dimens>
    
  - 스타일 및 테마 : 'valules'
    - styles.xml, themes.xml 


* 3장 
- 안드로이드 실습한거 보기 ( Ex02 )
----------------------------------------------------------------------------------------------------------------------------------------

* 1장 page.56 이후 내용
- 프로젝트 구조
  - manifests : 어플리케이션 수행에 필요한 필수 정보 
  - java : 소스코드, 단위테스트 등을 위해 필요 
  - res : (resource) 각종 리소스 저장 폴더, 레이아웃 그림 문자열 등의 리소스 저장 
  - Gradle Script : 빌드 스크립트 
  
- manifests
  - 어플리케이션의 이름, 버전 등의 정보를 저장 
  - 외부 라이브러리에 대한 정의 포함
  - 어플리케이션에서 선언한 구성요소, 기능, 요구사항 등에 대하여 기록하는 파일 
  - 리소스 파일이 생성이 되면 꼭 등록을 시켜주어야 사용할 수 있다. ( 정의 되지 않은 액티비티는 사용할 수 없다. 

- layout ( .xml 파일이다 ) 
  - view의 넓이 높이 지정
    - match_parent : 부모 객체를 기준으로 ( 내가 공간을 다 차지하겠다 ) 
    - wrap_content : 필요한 만큼 ( 내가 지정한 만큼만 공간을 차지 하겠다 )
    - text : textview가 가지는 메시지 
    - </androidx.constraintlayout..... > : 안드로이드 속성 사용을 정의한 네임스페이스 
    
- 액티비티 생명주기 
  - 액티비티는 액티비티 스택을 통해 관리 
  - 활성, 중지, 정지 상태가 있다. 
  
  - Activity launched 
    - onCreate()  <---------------------
    - onStart() <---- onRestart()      |
    - onResume() <-------   |          | App process
  - Activity running    |   |          |   killed     ( 메모리가 부족할 때 자원을 다 반납하고 프로세스를 종료시킨다 ) 
    - onPause()----------   |          |
    - onStop()--------------------------
    - onDestroy()
  - Activity shutdown

- onCreate() 
  - 액티비티가 생성될 때 처음으로 호출되는 메소드 
  - 전역 상태의 모든 리소스를 '초기화' ( layout, data binding 등) 
  - 액티비티는 기본적으로 위젯들이 배치되어 있는 레이아웃을 구성하고, 위젯들이 사용자와 상호작용을 하는 코드를 포함 
  
- onStart()
  - 액티비트가 초기화 과정을 마친 후 사용자에게 보여줄 준비가 되었을 때 호출  ( 실제 시작 ) 

- onResume()
  - 액티비티가 사용자에게 보여지고 사용자의 입력을 처리할 수 있음 
  - 액티비티 스택의 최상위에 위치 
  - ( 사용자가 실제 사용하는 위치가 onResume() 메소드 인거 같음 ) 
  
- onPause()
  - 사용자와 상호작용이 중지 
  - 액티비티 종료 등을 대비해 상태를 저장하는 등의 작업을 수행 
  - 완전히 종료된 상태가 아닌 잠시 멈춰있는 상태이다.
  - 하나의 창 위에 팝업 창이 뜨면 이전 창과 사용자는 상호작용이 잠시 중지 되고 팝업 창과 사용자가 상용작용을 하는 것을 말한다. 
  
- onStop()
  - 더 이상 액티비티가 사용자에게 보이지 않음 
  - 더 이상 액티비티 스택의 최상위에 위치히지 않음 
  
- onDestroy()
  - 존재하는 모든 리소스를 해제 
  - 시스템 내에 액티비티가 존재하지 않게 됨 
  - 모든 자원을 반납한다. 
  - 완전히 종료가 된 상태이다. 
  
- onRestart()
  - onStop() 메소드 호출 이후 정지 상태에 있던 액티비티를 다시 화면에 표시할 때 호출 


- 리소스 형식 
  - 속성 애니메이션 : animator
    - Property Animation 관련 정보가 설정된 xml파일 
    - Property Animation 시스템은 거의 모든 항목을 애니메이션으로 만들 수 있음 
    - 객체의 속성을 애니메이션으로 보여줄 수 있으며 기존 애니메이션 보다 강력한 기능을 제공 
  - 애니메이션 : anim
    - 애니메이션 정보가 설정된 xml 파일 
    - 회전, 크기 확대 축소, 알파값 등의 효과를 뷰에 적용하기 위해 만든 정보 
    - <set>, <alpha>, <scale> ...
  - 색상 상태 목록 : color
    - Color State List Resource를 정의하는 xml 파일 
    - 색상이 적용되는 view 객체의 상태에 따라 색상을 변경함 
    - xml 파일에 상태 목록을 설명할 수 있으며 단일 <selector> 요소 내에 <item> 요소에 정의 
  - 그래픽 : drawable 
    - 비트맵, 나인패치, xml 등...
  - 앱 아이콘 : mipmap
    - 런처 아이콘 
  - 메뉴 : menu
    - 옵션 메뉴, 컨텍스트 메뉴 또는 하위 메뉴 등과 같은 앱 메뉴를 정의하는 xml 파일 
    - <menu>, <item>...
  - 원본 : raw
    - 원시 형태로 저장하기 위한 임의의 파일 
  - 폰트 : font
    - .ttf, .otf 또는 .ttc 확장자가 붙은 글꼴 파일이나 <font-family> 요소를 포함한 xml파일 
  - XML : xml 
    - Resources.getXML()을 호출하여 런타임에 읽을 수 있는 임의의 xml 파일 
    - 다양한 xml 구성 파일을 여기에 저장 
  - 문자열 : values
    - strings.xml, 문자열 관리 
  - 문자열배열 : values
    - arrays.xml 등... 리소스 배열 
  - 색상 값 : values
    - colors.xml, 색상 정보 
  - 크기 : values 
    - dimens.xml, <dimen>
  - 스타일 및 테마 : values
    - styles.xml, themes.xml 
  
- 2장 실습2 
                                -- layout 부분 --
              
<EditText
        android:id="@+id/EditText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="16dp"
        android:layout_marginTop="28dp"
        android:layout_marginEnd="16dp"
        android:ems="10"
        android:inputType="textPersonName"
        android:text=""
        app:layout_constraintBottom_toTopOf="@+id/ClearButton"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.0"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.0" />
        
- EditText 해석 
  - EditText의 id는 EditText이다. 
  - 가로 길이는 0dp 
  - 세로 길이는 필요한 만큼만 지정 
  - 왼쪽의 여백은 16dp
  - 위쪽 여백은 28dp
  - 오른쪽 여백은 16dp 
  - 글자의 자간은 10
  - EdiText 타입은 PersonName 으로 한줄밖에 작성할 수 없다.
  - text는 빈칸 
  - 아래쪽 기준은 CleanButton의 위쪽 부분 
  - 오른쪽 기준은 parent의 오른쪽 부분 ( parent란 액티비티의 끝부분을 말한다 ) 
  - 왼쪽 기준은 parent의 왼쪽 부분


android:textAllCaps="false"
android:textSize="13sp"
app:layout_constraintBaseline_toBaselineOf="@+id/ClearButton"
app:layout_constraintStart_toEndOf="@+id/ClearButton"

- 해석 
  - 글자의 대소문자 구분을 한다 ( 기본값은 true라서 설정해주지 않으면 문자를 다 대문자로 출력하여 보여준다. ) 
  - 글자의 크기를 13sp로 한다. 
  - 수평의 기준을 ClearButton과 맞춘다. 
  - 왼쪽 기준을 CleatButton의 오른쪽으로 잡는다. 


                                -- 코드부분 -- 
                            
// 필요한 라이브러리를 import 
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

// AppCompatActivity를 상속받아서 구현 
// 인터페이스로 클릭리스너를 받아서 클릭 이벤트를 구현한다. 
public class MainActivity extends AppCompatActivity implements View.OnClickListener{

    // 레이아웃 객체 연결한 변수 선언 
    EditText editText;
    Button clearBnt, closeBnt;
    
    // onCreate() 어플리케이션 실행 부분 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
      
        // 상위 클래스의 onCreate() 메소드를 호출하여 정의된 작업을 수행한다. 
        super.onCreate(savedInstanceState);    
        // 액티비티 화면을 구성하는 역할 ( 화면에 표시할 뷰를 설정 ) 
        setContentView(R.layout.activity_main);

        // 선언한 변수와 레이아웃 객체와 연결  
        editText = (EditText) findViewById(R.id.EditText);
        clearBnt = (Button) findViewById(R.id.ClearButton);
        closeBnt = (Button) findViewById(R.id.CloseButton);

        // 각 버튼에 클릭이벤트를 연결 
        clearBnt.setOnClickListener(this);
        closeBnt.setOnClickListener(this);
    }
    
    // 클릭시 발생하는 이벤트를 구현
    @Override
    public void onClick(View view) {     
        // ID를 가져온는데 그 id가 ClearButton의 id일 시 editText를 빈칸으로 초기화를 해라 
        if(view.getId() == R.id.ClearButton){         
            // set은 값을 설정 하는것 
            editText.setText("");
        }
        if(view.getId() == R.id.CloseButton){
            // 액티비티 종료 
            finish();
        }
    }
}

set : 값을 재설정, 값을 변경할 수 있음 
get : 값을 가져온다.
put : 값을 넣어준다. 

- 2장 실습3
- 두번째 액티비티를 만들면 manifests에 추가를 해줘야한다. 그래야 호출할 수 있다. 
- 안드로이드스튜디오에서 실습 해봄 ( ch02 자료 확인 ) 

====================================================================================================================================================
1장 
- 프로젝트 구조
	- manifests : 어플리케이션 수행에 필요한 필수 정보 
	- java : 소스코드, 단위테스트 등을 위해 필요 
	- res : 각종 리소스(resource) 저장 폴더 
		레이아웃, 그림, 문자열 등의 리소스 저장
 		grawable : 그려질 수 있는 객체 (이미지)
		layout : 레이아웃 (화면 디자인), 화면 구성 형태, 관련 내용 저장 
		mipmap : 앱 아이콘 배치 
		values : 문자열, 배열, 색상, 스타일 등 
	- Gradle Script : 빌드 스크립트

- Manifest
	- 어플리케이션의 이름, 버전 등의 정보 저장 
	- 어플리케이션에서 선언한 구성요소, 기능, 요구사항 등에 대하여 기록하는 파일
	- 어플리케이션에 적재된 모든 컴포넌트에 대하여 기술하는 파일 
	- 외부 라이브러리에 대한 정의 포함 

	- .xml 파일의 코딩 부분 	
	- android:allowBackup="true"		// 백업 및 복원 설정 
	- android:label="My Application" 	// 사용 아이콘, 타이틀 라벨 등 
	- android:name=".MainActivity"		// 클래스 이름 정의, 정의되지 않은 액티비티 실행 불가
	- <intent-filter>			// 액티비티를 동작시키는 인텐트 결정 

- 레이아웃 ( layout/ .xml ) 
	- 사용자 인터페이스 작성 

	// 기본 액티비티 생성, 여러 액티비티 존재 가능, AppCompatActivity에서 상속해서 사용 
	- public class MainActivity extends AppCompatActivity {
    	      @Override
	      // onCreate() : 어플리케이션 실행 , onCreate() 메소드가 호출되면서 액티비티 생성 
    	      protected void onCreate(Bundle savedInstanceState) {
		    // 상위 클래스의 onCreate() 메소드를 호출하여 정의된 작업을 수행 
          	    super.onCreate(savedInstanceState);        
		    // 액티비티의 화면을 구성하는 역할 
		    // 화면에 표시할 뷰를 설정, 제공 리소스 이용 
          	    setContentView(R.layout.activity_main);  
	      }
	  }

2장 
- 액티비티 생명주기 
	     - Activity launched
  ------------>	- onCreate()	
  |	  	- onStart() <---------- onRestart()
- App process  	- onResume() <------  		|
    killed   - Activity running    |		|
  |------------	- onPause()---------		|
  -------------	- onStop()---------------------
	  	- onDestroy()
	     - Activity shut down
	
- onCreate()
	- 액티비티가 생성될 때 처음으로 호출되는 메소드 
	- 전역 상대의 모든 리소스를 초기화
	- 액티비티는 기본적으로 버튼, 리스트, 체크박스, 입력 표시줄 등과 같은 위젯들이 배치되어 있는 
	  레이아웃을 구성하고, 위젯들이 사용자와 상호작용을 하는 코드 포함 

- onStart()
	- 액티비티가 초기화 과정을 마친 후 사용자에게 보여줄 준비가 되었을 때 호출 

- onResume()
	- 액티비티가 사용자에게 보여지고 사용자의 입력을 처리할 수 있음 
	- 액티비티 스택의 최상위에 위치 

- onPause()
	- 사용자와 상호작용을 중지 
	- 액티비티 종료 등을 대비해 상태를 저장하는 등의 작업을 수행 

- onStop()
	- 더 이상 액티비티가 사용자에게 보이지 않음 
	- 더 이상 액티비티 스택의 최상위에 위치하지 않음 

- onDestroy()
	- 존재하는 모든 리소스를 해제 
	- 시스템 내에 액티비티가 존재하지 않게 됨 

- onRestart()
	- onStop() 메소드 호출 이후 정지 상태에 있던 액티비티를 다시 화면에 표시할 때 호출 

- App process killed
	- 메모리가 부족할 때 프로세스가 강제로 종료가 된다. 


- 리소스 형식 
	    리소스 형식		| 디렉터리 |                         리소스 설명 
	-----------------------------------------------------------------------------------------------------------------------------------
	- 속성 애니메이션 	: animator | Property Animation 관련 정보가 설정된 xml 파일 
					     Property Animation 시스템은 거의 모든 항목을 애니메이션으로 만들 수 있음 
					     객체의 속성을 애니메이션으로 보여줄 수 있으며 기존 애니메이션(anim) 보다 더 강력한 기능을 제공

	- 애니메이션 		: anim	   | 애니메이션 정보가 설정된 xml 파일 
					     회전, 크기, 확대축소, 알파값 등의 효과를 뷰에 적용하기 우해 만든 정보 
					     <set>, <alpha>, <scale>, ...
	
	- 색상 상태 목록 	: color    | Color State List Resource를 정의하는 xml 파일 
					     색상이 적용되는 View 객체의 상태에 따라 색상을 변경함 
					     xml 파일에 상태 목록을 설명할 수 있으며 단일 <selector> 요소 내에 <item> 요소에 정의 

	- 그래픽 		: drawable | 비트맵, 나인패치, xml등...

	- 앱 아이콘 		: mipmap   | 런처 아이콘

	- 레이아웃 		: layout   | 레이아웃 정의하는 xml 파일 

	- 메뉴			: menu     | 옵션 메뉴, 컨텍스트 메뉴 또는 하위 메뉴 등과 같은 앱 메뉴를 정의하는 xml 파일 

	- 원본 			: raw	   | 원시 형태로 저장하기 위한 임의의 파일 

	- 폰트 			: font	   | .ttf, .otf 또는 .ttc 확장자가 붙은 글꼴 파일이나 <font-family> 요소를 포함한 파일 

	- XML			: xml	   | Resources.getXML()을 호출하여 런타임에 읽을 수 있는 임의의 xml파일 
					     다양한 xml 구성 파일을 여기에 저장 

	- 문자열 		: values   | strings.xml, 문자열 관리

	- 문자열 배열 등..	: values   | arrays.xml 등... 리소스 배열

	- 색상 값 		: values   | colord.xml 색상 정보 

	- 크기 			: values   | dimens.xml <dimen>... 

	- 스타일 및 테마 	: values   | style.xml, themes.xml 

=================================================================================================================================================================================

- 안드로이드 프로젝트 구조
	- manifests		: 어플리케이션의 수행의 필수 정보 
					- 외부라이브러리에 대한 정의 포함 
					- 어플리케이션 이름, 버전 정보등을 포함 
					- 어플리케이션에서 선언한 구성요소, 기능들에 대하여 기록 
	- java			: 소스 코드
	- res			: 리소스를 저장, 레이아웃, 그림, 문자열 등을 저장 
	- Gradle script		: 빌드 스크립트 


- 액티비티 생명주기 
	- Activity launched
	- onCreate	: 변수 및 액티비티 초기화, 액티비티가 처음 생성될 때 호출되는 메소드 
	- onStart	: 액티비티가 사용자에게 보여줄 준비가 완료된 상태 
	- onResume	: 사용자에게 입력을 처리,사용자에게 보여짐, 액티비티 스택의 최상위에 위치  
	- Activity running 
	- onPause	: 사용자와 상호작용을 중지, 액티비티의 상태를 저장하는 작업을 수행 
	- onStop	: 더 이상 액티비티가 사용자에게 보이지 않음, 더 이상 최상위 스택에 위치하지 않음 
	- onDstroy	: 리소스 해제, 더이상 액티비티가 화면에 보이지 않게 됨 
	- Activity shut down

	- onRestart	: 정지 되어 있던 액티비티를 다시 화면에 보여줌 
	- app process killed



