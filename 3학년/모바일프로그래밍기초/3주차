0317 ( 2주차는 휴강 따로 보강할 예정 ) 

- 안드로이드 
  - 인간과 똑같은 모습을 하고 인간과 닮은 행동을 하는 로봇 
  - 구글에서 나온 모바일 플랫폼 ( 운영체제 + API 이지만 정확히 말하면 플랫폼이 맞다. )
    ★ 플랫폼과 프레임워크의 차이가 무엇인가 ( API 등의 범위 차이 ) => 이정도는 한번 찾아보는 것이 좋다. 
    ★ 면접 볼때 인터페이스와 추상클래스 차이, 오버로딩과 오버라이딩 차이 함께 찾아보기 
  - 안드로이드는 네이티브/서브파티 어플리케이션에서 동일한 API사용 
    - 공급자하고 사용자하고 사용하는 API가 같다. ( 한마디로 구글에서 만든 기능을 완전 똑같이 만들 수 있다. 능력만 되면 만들 수 있다.)
  - 전용 개발도구, API가 필요 
  - 폐쇄적인 환경 
  - 기본 탑재된 네이티브 애플리케이션 > 서드파티 애플리케이션 
  
  - 안드로이드의 강점 
    - 강력한 API, 탁월한 문서, 활발한 개발자 커뮤니티 
  
  - 안드로이드의 단점 
    - 버전이 다르면 어플리케이션이 동작을 하지않는다. 
    - 버전이 장점이면서 단점이다. 

- 안드로이드 개요 
  - 자바를 사용하는 미들릿 도입 
    - 자바 가상 머신(JVM) 위에서 실행 
    - JVM은 하부에 있는 하드웨어 추상화, 자바 런타임 지원 
    - 장치 하드웨어의 제한된 접근 
    
  - 안드로이드 
    - 오픈 소스인 리눅스 커널 위에 구축된 열린 개발 환경 제공 
      ★ 오픈 소스 코드가 무엇인지 알고 그것을 반드시 오픈해야 하는지 아니면 오픈을 하지 않아도 되는지 개념적으로 알고 있기  
    - 일련의 API 라이브러리를 통해 모든 애플리케이션에서 하드웨어에 접근 가능 
    - 애플레케이션 상호작용 완벽지원 
    - 모든 애플리케이션은 평등 ( 네이티브와 서브파티가 동일한 API를 쓴다는 말 ) 
    - 네이티브 애플리케이션을 서드 파티 어플리케이션으로 대체 가능
    
- 데이터베이스 저장 
  - 작고 가벼운 SQLite 제공 
  - 데이터베이스는 기본적으로 샌드박스가 적용 ( 즉, 데이터베이스에 있는 내용은 그 데이터베이스를 만든 애플리케이션만 사용 가능 ) 
    - 예로 어플이 3개면 데이터베이스가 3개 만들어진다. 각각의 앱에 DB가 붙는다. 서로 상호 DB연동이 안됨 
  - 콘텐트 프로바이더 
    - 각 애플리케이션의 데이터베이스를 공유할 수 있도록 하는 메커니즘 ( 샌드박스에서 서로 공유하지 못하는 DB를 콘텐트 프로바이더를 사용하여 해결 ) 

- 안드로이드 소프트웨어 스택 이해 
  - 1. Linux커널 
    - 안드로이드 플랫폼의 기반 
    -  ART는 스레딩 및 하위 수준의 메모리 관리와 같은 기본 기능에 리눅스 커널을 사용     
  - 2. HAL ( 하드웨어 추상화 계층 ) 
    - Java API 프레임워크 기기 하드웨어 기능을 노출하는 표준 인터페이스 제공 
    - 카메라 또는 블루투스 모듈과 같은 특정 유형 하드웨어 구성 요소를 위한 인터페이스를 구현     
  - 3. Android Runrime
    - ART 인터페이스로 실행 
    - 저용량 메모리 기기에서 여러 가상머신을 실행 
  - 4. Native C/C++ Libraries 
  - 5. Java API Framework 
  - 6. SYstems Apps 

- 안드로이드 스튜디오 설치시 실패할때 
  - C드라이브 밑에 사용자 계정 
  - 옵션 -> 숨긴파일과 폴더 및 드라이브 표시 -> AppDate -> local -> android -> SDK
  - 애뮬레이터 밑에 있는 디렉토리에 intel이란 디렉토리가 있다. 
  - 그 안에 파일이 다운됨 
  - 그 안에 setup.exe 파일이 있음 
  - 그것을 더블클릭 
  - 실행 
  
  - 완전히 프로그램이 오픈되고 스튜디오 코딩하기 



- 프로그래밍 실력은 계단 형식으로 증가
