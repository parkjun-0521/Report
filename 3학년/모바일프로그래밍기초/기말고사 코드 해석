SharedPreferences spref;
- 프리퍼런스 객체를 선언하는 부분 
- 객체 변수를 spref로 선언하는 부분 

SharedPreferences.Editor editor;
- 프리퍼런스를 수정하기 위해 edit 객체를 선언하는 부분 
- 이를 선언함으로 써 commit()과 apply()를 사용할 수 있는 객체 선언 

spref = getSharedPreferences("gpref",MODE_PRIVATE);
- 객체를 생성하는 부분 
- 객체의 name을 gpref로 선언하고 MODE를 PRIVATE로 지정하여 
- 현재 어플리케이션에서만 사용할 수 있는 객체를 생성한다. 

editor = spref.edit();
- 프리퍼런스를 수정또는 변경할 수 있는 edit 객체를 생성 

String temp1 = spref.getString("editText01", "1");
- temp1 이라는 문자열 변수에 editText01이라는 id가 가지고 있는 value를 할당한다.
- 만약 editText01에 값이 없을 경우 default 값으로 1이라는 값을 할당한다. 

editor.putString("editText01", text01);
- text01의 값을 editText01이라는 id를 주고 가져오는 부분 

editor.apply();
- 프리퍼런스에서 가져온 값이 변경되거나 수정이 되면 
- apply() 또는 commit()을 해주어야 값이 실제로 적용이된다. 
- 변경된 값을 저장하는 부분

editor.remove("editText01");
- editText01이라는 id에 있는 value를 제거하는 부분이다. 

<androidx.constraintlayout.widget.Guideline
        android:id="@+id/h_gline"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintGuide_percent="0.20"
/>
- 가이드라인을 그리는 xml의 디자인이다. 
- horizontal은 가로로 가이드라인을 그린다.
- vertical은 세로로 가이드라인을 그린다. 

private  static final String LOCAL_FILE = "memo_data.txt";
- 상수형 문자열 변수 LOCAL_FILE 선언한다.
- LOCAL_FILE 는 memo_data.txt 라는 값을 할당한다.
- 파일의 경로를 지정한다. 

InputStream in;
- 입력스트림의 최상위 객체를 선언한다. 

BufferedReader reader;
- Reader 스트림에 Buffer를 추가한 입력스트림 객체를 선언 

try{
      in = openFileInput(LOCAL_FILE);
} catch (FileNotFoundException e){
      in = getResources().openRawResource(R.raw.raw_data);
}
- LOCAL_FILE의 입력스트림을 가져와 in 객체에 할당한다. 
- 파일이 없다면 리소스파일의 raw_data 파일의 입출력스트림을 in에 할당한다. 

★
reader = new BufferedReader(new InputStreamReader(in, "UTF-8"));
- in의 입력스트림의 값을 UTF-8 인코딩으로 읽을 수 있는 버퍼리더 객체인 reader를 생성 

protected void onPause() {
}
- 안드로이드 생명주기의 하나인 onPause() 메소드이며 

if(s.length() == 0){
    deleteFile(LOCAL_FILE);
    return;
}
- 파일에 적힌 문자가 없을 경우 
- LOCAL_FILE 의 값인 memo_data.txt 파일을 제거한다. 

OutputStream out = openFileOutput(LOCAL_FILE, MODE_PRIVATE);
- 출력스트림객체를 생성한다. 
- LOCAL_FILE 의 있는 파일명에 관하여 현재 어플리케이션에서만 사용할 수 있는 출력스트림 객체를 선언  

★
PrintWriter writer = new PrintWriter(new OutputStreamWriter(out, "UTF-8"));
- out이라는 객체에서 문자열 기반 출력 스트림을 반환, UTF-8 인코딩으로 변환 하여 writer 객체를 생성한다. 

Toast.makeText(this, "onClick", Toast.LENGTH_LONG).show();
- 작은 팝업을 띄우는 부분 
- 팝업의 내용은 onClick이고 팝업의 길이는 LONG으로 지정하여 길게 보여질 수 있도록 하여 보여준다.

@Override 
public boolean onLongClick(View v) {
  Toast.makeText(this, "onLongClick", Toast.LENGTH_LONG).show();
  return true;
}
- Long 클릭을 하였을 때 발생하는 이벤트로 
- 롱클릭시 작은 팝업창 하나를 띄워준다. 
- return true일 경우 이후에 동작하는 이벤트를 실행하지 않는다. 
- click 이벤트가 발생 해야하는데 true로 막을 그것이 실행되지 않도록 막을 수 있다. 

@Override
public void onFocusChange(View v, boolean hasFocus) {
  String s = "";
  if(hasFocus) {
    ((EditText) v).setText("");
  } else {
    s = edit01.getText().toString();
    edit01.setText(s + " + focus change");
  }
}
- 마우스의 포커스변화에 따른 이벤트 발생 부분이다.
- hasFocus 는 마우스의 포커스가 해당 이벤트가 등록되어있는 오브젝트를 가리켰을 때 발생하는 로직을 작성하는 부분이다. 
- editText를 클릭하였을 때 공백으로 만들고 포커스를 잃어버렸을 때 적힌 문자열에 + focus change 문자열을 추가하여 작성 

@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {
  Toast.makeText(this, "키를눌렀음", Toast.LENGTH_LONG).show();
  return super.onKeyDown(keyCode, event);
}
- 애뮬레이터에서 뒤로가기 버튼을 눌렀을 때 동작하는 로직을 적는 부분 
- 뒤로가기 버튼을 눌렀을 때 " 키를 눌렀음 " 이라는 작은 팝업 문구가 뜬다. 

@Override
public void onBackPressed() {
  super.onBackPressed();
}
- 또다른 뒤로가기 버튼을 눌렀을 때 동작하는 로직부분
- 내부의 super 코드를 지울경우 뒤로가기 버튼을 눌렀을 때 뒤로가기 버튼이 동작하지 않도록 할 수 있다. 

@Override
public boolean onTouch(View v, MotionEvent event) {
  if(event.getAction() == MotionEvent.ACTION_DOWN) {
    return true;
  }
  if(event.getAction() == MotionEvent.ACTION_MOVE) {
    int x = (int)event.getX();
    int y = (int)event.getY();

    int rawX = (int)event.getRawX();
    int rawY = (int)event.getRawY();

    return true;
  }
  if(event.getAction() == MotionEvent.ACTION_UP) {
    return true;
  }
  return false;
}
- 터치 이벤트를 작성하는 부분이다.
- ACTION_DOWN은 마우스를 눌렀을 때 동작하는 부분 
- ACTION_MOVE는 마우스를 누른 상태에서 움직이면 동작하는 로직부분
- ACTION_UP은 누르고 있는 마우스를 떼었을 경우 동작하는 부분이다. 

int x = (int)event.getX();
int y = (int)event.getY();

int rawX = (int)event.getRawX();
int rawY = (int)event.getRawY();
- 절대 좌표와 상대좌표 개념 
- getRawX는 절대 좌표를 말한다. 어디서 마우스를 찍어서 움직이더라도 무조건 애뮬레이터의 왼쪽 상단이 기준점으로 0,0좌표다
- getX는 상대좌표로 오브젝트의 왼쪽 상단이 기준점으로 0,0 좌표이다. 

<uses-permission android:name="android.permission.INTERNET"/>
- 웹뷰를 사용할 때 권한을 지정해주어야 한다. 
- internet을 사용하겠다는 권한을 지정해 줘야 웹뷰를 사용할 수 있다. 

<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
- 웹뷰에서 파일을 다운로드 하기위해서 지정해주어야 하는 다운로드 권한이다. 

android:usesCleartextTraffic="true"
- 웹뷰에서 내부적으로 발생하는 에러를 잡아주는 부분 

★
web01.setWebViewClient(new WebViewClient());
- web01이라는 객체에 기본 웹뷰 클라이언트를 설정하는 것을 의미한다 

web01.getSettings().setJavaScriptEnabled(true);
- 웹뷰에서 자바스크립트 기능을 허용할 지의 여부에 관한 부분 ( true면 허용하겠다, false면 허용하지 않겠다는 것을 의미 ) 

web01.getSettings().setBuiltInZoomControls(true);
- 현재 페이지에서 줌인 기능을 사용하겠다. ( true면 사용하겠다. false면 사용하지 않겠다. ) 

web01.clearCache(true);
- 캐시 제거가 필요한 경우 

★
web01.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
- 웹페이지가 항상 캐시가 없는 상태로 서버에서 새로운 데이터를 가져오도록 동작 하는 부분 

web01.clearHistory();
- 히스토리 제거가 필요한 경우 

web01.setDownloadListener(this);
- 웹뷰에 다운로드 리스너 이벤트를 추가하여 다운로드가 될 수 있도록 한다. 

web01.loadUrl("http://www.naver.com");
- 웹뷰가 초기에 띄워줄 페이지의 URL을 연동하는 부분 

@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {
  if((keyCode == KeyEvent.KEYCODE_BACK) && web01.canGoBack()){
    web01.goBack();
    return true;
  }
  return super.onKeyDown(keyCode, event);
}
- 애뮬레이터에서 뒤로가기 버튼을 눌렀을 때 발생하는 이벤트
- 현재 만약 뒤로가기 키를 눌렀고 웹뷰가 뒤로갈 수 있는 상황일 경우 웹뷰를 이전페이지로 되돌리는 코드
- canGoBack은 현재 웹뷰가 뒤로 갈 수 있는 상황인지 아닌지를 판단하는 메소드 

public boolean onCreateOptionsMenu(Menu menu) {
  return super.onCreateOptionsMenu(menu);
}
 public boolean onOptionsItemSelected(@NonNull MenuItem item) {
  return super.onOptionsItemSelected(item);
}
- 메뉴바를 만들기 위해서 반드시 필요한 메소드 2개 
- onCreateOptionsMenu 메소드는 메뉴바를 만들기 위해서 필요한 부분이고 
- onOptionsItemSelected 메소드는 메뉴바의 아이템을 선택했을 경우 발생하는 이벤트를 적는 부분이다. 

menu.add(0, 1, 1, "메뉴1");
menu.add(0, 2,0,"메뉴2");
- 메뉴에 아이템을 추가하는 부분이다. 
- 메뉴의 순서는 메뉴2 메뉴1 순서로 보이게 된다. 
- 2번째 인자값인 itemId는 절대 겹치게 작성해서는 안된다. 

SubMenu etc = menu.addSubMenu("sub Menu");
etc.add(0,4,1,"sub Menu1");
- 서브 메뉴를 만들고 거기에 item을 등록시키는 메소드로 
- 서브 메뉴의 이름은 sub Menu이다. 
- 그 서브 메뉴안에 sub Menu1이라는 item을 추가하여 서브메뉴를 만든다. 

switch(item.getItemId()){
  case 1 :
    Toast.makeText(this, "1번", Toast.LENGTH_SHORT).show();
    break;
  case 2 :
    Toast.makeText(this, "2번", Toast.LENGTH_SHORT).show();
    break;
  case 3 :
    Toast.makeText(this, "3번", Toast.LENGTH_SHORT).show();
    break;
}
- 각 메뉴에 있는 item을 눌렀을 때 발생하는 동작 로직을 작성하는 switch case문으로 
- 미리 선언하였던 itemId의 값이 case의 조건문 값이 된다. 
- 따라서 itemId가 1인 item을 눌렀을 경우 1번이라는 작은 팝업 메시지가 뜬다. 
- if문으로 작성해도 상관없는 부분이다. 

<style name="Theme.NoActionBar" parent="Theme.MaterialComponents.DayNight.NoActionBar"> </style>
- 레이아웃의 style을 바꾸는 로직 부분이다. 
- 이부분은 themes.xml 부분에 있고 기본적인 레이아웃 전체의 UI style을 변경할 수 있다.
- 특히 .NoActionBar로 지정할 경우 기본적인 Default 액션바가 사라지게 된다.  

android:theme="@style/Theme.NoActionBar"
- AndroidManifast 파일의 내용을 수정하는 부분으로 
- 내가 만들어둔 style을 적용 시키는부분이다. 
- 레이아웃 전체에 적용되는 UI

<androidx.appcompat.widget.Toolbar
        android:id="@+id/toolbar"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:background="?attr/colorPrimary"
        android:minHeight="?attr/actionBarSize"
        android:theme="?attr/actionBarTheme"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />
- xml로 툴바를 만드는 부분

<item android:id="@+id/item1" android:title="Menu 1" app:showAsAction="always"/>
- xml로 메뉴바에 item 추가하는 부분
- item1이라는 id를 부여하고 , Menu1 이라는 text를 지정하고, showAsAction의 속성중 하나인 always를 사용하여 
- 메뉴바 위로 item을 빼내어 바로 볼 수 있도록 한다. 

setSupportActionBar(toolbar);
- 내가 직접 만든 툴바를 사용한다. 
- ( ) 안에 툴바 객체를 넣어준다. 

getSupportActionBar().setDisplayShowTitleEnabled(false);
- 툴바에 기본적으로 있는 Title문구를 비활성화 하겠다

getSupportActionBar().setDisplayHomeAsUpEnabled(true);
- 툴바에 뒤로가기 버튼을 활성화 하겠다. 

@Override
public boolean onCreateOptionsMenu(Menu menu) {
  getMenuInflater().inflate(R.menu.main_options, menu);
  return super.onCreateOptionsMenu(menu);
}
- 메뉴를 적용시키는 부분
- 리소스의 menu 폴더에 있는 main_oprions 라는 파일을 읽어와 메뉴를 생성한다. 

public boolean onOptionsItemSelected(@NonNull MenuItem item) {
  int id = item.getItemId();
  if(id == android.R.id.home){
    Toast.makeText(this, "메뉴 버튼입니다.", Toast.LENGTH_SHORT).show();
  }
  if(id == R.id.item1){
    Toast.makeText(this, "item1", Toast.LENGTH_LONG).show();
  }
  return super.onOptionsItemSelected(item);
}
- 메뉴를 선택했을 때 동작하는 부분을 작성 
- 툴바의 뒤로가기 버튼을 눌렀을 경우에 메뉴 버튼입니다 라는 문구가 뜬다.
- item1 의 id를 가지고 있는 메뉴의 item을 클릭할 시 item1 이라는 문구를 보여줍니다. 

getMenuInflater().inflate(R.menu.option_menu1,menu);
- 리소스 밑의 menu 폴더에 있는 xml을 열어서 액티비티에 적용시키는 부분
- 메뉴바를 디자인한 xml 파일을 적용시키기 위해서 작성한 부분이다. 

invalidateOptionsMenu();
- 메뉴바를 변경하는 로직을 작성할 시 메뉴바를 다시 한번 실행해 주어야 바뀐게 적용이 된다.
- invalidataOptionMenu() 메소드는 이 작업을 도와주는 것으로 
- 이 메소드가 호출이 되면 시스템에서 onCreateOptionMenu()를 호출하도록 요청을 하여 메뉴바를 다시 만든다. 
- 이때 boolean 이나 int등 flag 변수를 만들어서 여러 다른 메뉴를 띄워줄 때 즉시 화면을 전환 시켜 보여줄 수 있다. 





