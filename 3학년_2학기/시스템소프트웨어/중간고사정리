- 1020
- 중간고사 정리 

- 소프트웨어의 이해 
  - 프로그램
    - 원시코드 ( source code )

  - 소프트웨어 
    - 원시코드 
    - 모든 산출물 ( 자료구조, DB 구조, 테스트 결과 )  
    - 각 단계마다 생산되는 문서 
    - 사용자 매뉴얼 

- 소프트웨어의 분류 ( 관리, 제어, 임베디드 ) 
  - 관리 소프트웨어 
    - 자료를 받아들여 가공한 후 정보를 제공하는 소프트웨어 
    - 주로 DB에 자료를 저장한 후 검색을 통해 사용자가 원하는 형태로 정보를 제공 

  - 제어 소프트웨어 
    - 각종 센서를 이용하거나 기기들의 동작을 제어하는 소프트웨어
    - 사용자 메뉴얼 

  - 임베디드 소프트웨어   
    - 장비나 기기에 내장된 형태의 소프트웨어 

- 소프트웨어 특징 
  - 개발
    - 개인 능력 별 결과물의 차이가 있음 
  - 품질저하 
    - 하드웨어 H/W : 오래사용하면 부품이 닳는다, 고장 발생 빈도가 높다, 기능이 떨어진다. 
    - 소프트웨어 S/W : 오래 사용해도 닳지 않는다, 고장 발생 빈도가 낮다, 기능이 동일 

- H/W 실패 곡선 ( 욕조 곡선 ) 
  - 초기 실패율 높음 -> 오류해결 -> 오랜 기간 동안 사용 -> 주변 환경 문제 발생 -> 다시 실패율 증가 

- S/W 실패 곡선 
  - 초기 실패율 높음 -> 오류해결 -> 실패율 낮음 -> 변경 발생 -> 변경으로 인한 부작용 -> 실패율 급격히 증가 -> 다시 변경 발생 순환 

- 소프트웨어 당면 과제 
  - 소프트웨어 개발의 느린 발전 속도 
  - 새로운 소프트웨어에 대한 사용자 요구의 증가 
  - 관리 기술의 부분적 활용 

- 소프트웨어 개발 생명주기 ( SDLC : Software Development Life Cycle) 
  - 계획 -> 분석 -> 설계 -> 구현 -> 테스트 -> 유지보수 

- 계획, 요구분석 
  - 1단계 : 계획 
    - 개발 비용 산정 : COCOMO모델, 기능점수 모델 사용 
    - 일정 계획 : 작업분할구조도, CPM 사용 
    - 위험 관리 

  - 2단계 : 요구분석 
    - 기존 시스템의 문제점 파악 -> 새로운 요구사항 도출 -> 다이어그램 작성 
    - 개발에 따른 표현 도구 
    - 최종 산출물 : 요구 분석 명세서 

  - 3단계 : 설계 
    - 설계 원리 : 분할과 정복, 단계적 분해, 모듈화, 정보은닉
    - 아키텍처 스타일 
    - 모듈 평가 기준 : 응집도와 결합도 

  - 4단계 : 구현 
    - 간략한 프로그래밍 언어의 역사 
    - 표준 코딩 규칙 

  - 5단계 : 테스트 
    - 테스트의 절차 
    - 사용되는 목적에 따른 분류 
    - 품질 특성에 따른 분류 
    - 소프트웨어 개발 단게에 따른 분류 

  - 6단계 : 유지보수 
    - 수정 유지보수 
    - 적응 유지보수 
    - 기능보강 유지보수 
    - 예방 유지보수 

- 소프트웨어 개발 프로세스의 이해 
  - 프로세스 
    - 일을 처리하는 과정 또는 순서 
    - 주어진 일을 해결하기 위한 목적으로 그 순서가 정해져 수행되는 일련의 절차 

  - 좁은 의미 소프트웨어 개발 프로세스  
    - SW제품을 개발할 때 필요한 절차, 과정, 구조 
    - 사용자의 요구사항을 SW시스템으로 구현하기 위한 일련의 활동 

  - 넓은 의미 소프트웨어 개발 프로세스 
    - 절차, 구조, 방법, 도구, 참여자까지 모두 포함 
    - SW개발 목적을 이루는데 필요한 통합적인 수단 

- 주먹구구식 모델 
  - 정확한 앞뒤 계산 없이 일을 대충 처리할 때 쓰는 말 
  - 공식적인 가이드라인이나 프로세스가 없는 개발 방식 
  - 일단 코드를 작성하여 제품을 만들어본 후 요구분석, 설계, 유지보수에 대해 생각

  - 대학 수업의 한학기용 프로젝트 정도

  - 단점 
    - 관리및 유지보수가 어렵다.
    - 아키텍처를 만들 수도 없다. 
    - 프로젝트의 진척 상황을 파악할 수 없다. 
    - 수정이 매우 어려워 진다. 

★ 선형 순차적 모델 ( 폭포수 모델 ) 
  - 계획 -> 요구분석 -> 설계 -> 구현 -> 테스트 -> 유지보수 
  - 위 작업이 각 단계가 완벽하게 이루어지는 작업 모델 
  - 이론상 가장 완벽한 모델이다. 

  - 단점 
    - 각 단계의 결과물이 완벽한 수준으로 작성이되어야 다음 단계에 오류를 넘겨주지 않는다. 
    - 사용자가 중간에 가시적인 결과를 볼 수 없어 답답할 수 있다. 

- V 모델 
  - 폭포수 모델 + 테스트 단계 추가 확장 
  - 산출물 중심 ( 폭포수 모델 ) VS 각 개발 단계를 검증하는데 초점 ( V모델 )

  - 요구분석 -> 아키텍처 설계 -> 모듈설계 -> 구현 -> 단위테스트 -> 통합테스트 -> 시스템 테스트 -> 인수 테스트 

- 진화적 프로세스 모델 
  - 프로토타입 모델 
    - 대량 생산에 앞서 미리 제작해보는 원형 또는 시제품으로, 제자품 모형 
    - 사용자의 요구를 받아 일단 모형을 만들고 이 모형을 사용자와 의사소통 하는 도구로 활용 

  - 프로토타입 모델의 개발 생명주기 
    - 계획 -> 요구사항 정의 및 분석 -> 설계 -> 구현 -> 테스트 -> 유지보수 
                    └> 요구수정 -> 빠른 설계 -> 프로토타입 개발 -> 고객평가 -> 프로토타입 조정 -> 구현 

  - 개발 절차 
    - 요구사항 정의 및 분석 
    - 프로토타입 설계 
    - 프로토타입 개발 
    - 사용자에 의한 프로토타입 평가 
    - 구현 

  - 장점 
    - 프로토타입이 의사소통 도구로 활용 
    - 반복되는 요구사항 정의를 통해 사용자 요구가 충분히 반영된 요구 분석 명세서 작성 
    - 초기 프로토타입 사용을 통한 새로운 요구사항 발견 
    - 프로토타입 사용을 통한 완성품의 예측 가능  

★ 나선형 모델 
  - 진화적 프로토타입 모델 + 위험 분석 
  - 계획 및 요구분석 -> 위험분석 -> 개발 -> 사용자 평가를 계속 지속적으로 반복 ( 1차 -> 2차 ... 이런한 방식으로 )
  
  - 위험 분석 단계의 위험 요소 
    - 빈번히 변경되는 요구사항 
    - 팀원들의 경험부족 
    - 결속력이 떨어지는 팀워크 
    - 프로젝트 관리 부족 

  - 나선형 모델 개발 절차 
    - 1. 계획 및 요구분석
      - 사용자의 개발 의도 파악 
      - 프로젝트의 명확안 목표 
      - 제약 조건의 대안을 고려한 계획 수립 
      - 기능/비기능 요구사항 정의 및 분석 

    - 2. 위험 분석 단계 
      ★ 개발자의 이직         : 가장 위험한 부분 ( 개발자가 바뀌면 시간이 더 오래 걸리게 됨 ) 
      ★ 요구 사항 변경        : 가장 위험한 부분 ( 계속 요구사항이 추가되고 바뀌면서 개발이 늦어진다 )
      - 발주사의 재정적 어려움 
      - 예상을 빗나간 투입 인력 
      - 개발 기간 부족 
      - 개발비 초과 











