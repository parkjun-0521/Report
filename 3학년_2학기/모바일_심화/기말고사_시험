- 1216
- 기말고사 정리 

- 수업자료 10번 (기능/실습 20/21 컨텐트 프로바이더 관련)
- 수업자료 11번 (기능/실습 22/23/24 브로드케스트리시버, 인텐트플래그, 알림)

- 10장 정리 
- Content Provider - Audio(미디어) ( 기능 실습 20 )

- Mediastore.Audio.Media 클래스 
  - 오디오 파일을 관리하는 클래스 
  - 오디오 파일의 제목이나 재생 길이 등을 얻는 것이 가능 

- android:fillViewport="true"
  - 오디오 정보를 출력할 TextView에 스크롤 기능추가 

- <user-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
  - 외부 저장소 사용 권한 추가 
  - 안드로이드 버전에 따른 권한 변경이 있음 
  - 6.0 이상이 타겟인 버전인 경우, 권한 추가 뿐만 아니라 권한에 따라서 권한 허용을 위한 처리 코드가 별도로 필요 

- ActivityCompat.requestPermissions(activity:this, new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, MODE_PRIVATE );
  - 사용자에게 권한 요청 부분 
  - 권한 확인을 통해 필요 시 동작하도록 구현 

- ContentResolver cr = getContentResolver(); 
  - 컨텐트 리졸버 
  - 결과를 반환해주는 브릿지 역할을 해준다

- Cursor c = cr.query ( 컨텐트 프로바이더 URL, 조회할 컬럼, 선택할 줄, 선택 조건, 정렬 조건 )  
  - 쿼리(질의) 결과로 나온 레코드들을 가리키는 것을 말한다. 
  - 인자 값에 맞는 레코드를 가리킨다. 

- getColumnIndexOrThrow()
  - 특정 필드의 인덱스 값 반환 
  - 커서로 가져온 레코드에서 특정 값을 반환 

- append(c.getString( 변수값 ) );
  - 반환받은 인덱스값을 이용하여 원하는 순서, 모양 등으로 데이터 출력 

=====================================================================================================
- 10장 
- ontent Provider - 통화 ( 기능 실습 21 )

- <user-permission android:name="android.permission.READ_CALL_LOG" />
  - 통화 로그 권한 추가 
  - 6.0 이상이 타겟인 버전인 경우, 권한 추가 뿐만 아니라 권한에 따라서 권한 허용을 위한 처리 코드가 별도로 필요  

- text01 = (TextView) findViewById(R.id.textView01);
- text01.setMovementMethod(new ScrollingMovementMethod()); 
  - TextView에 스크롤 기능을 추가 

- ActivityCompat.requestPermissions(activity:this, new String[] {Manifest.permission.READ_CALL_LOG}, MODE_PRIVATE ); 
  - 사용자에게 권한 요청 부분 
  - READ_CALL_LOG 권한 요청 

- getContentResolver() 
  - 필요한 경우, 권한 확인을 통해서 사용자에게 권한을 획득했는지 확인 

=====================================================================================================
- 11장 
- Broadcast Receiver ( 기능 실습 22 ) 

- 브로드캐스트 리시버 
  - 시스템에 변화가 생겼을 때 이를 알려주는 방식 
  - 시스템 서비스를 위해 시스템 이벤트를 전역으로 방송할 때 이를 이용 
  - 서비스나 알림과 비슷한 부류 
  - 사용자 인터페이스를 보여주지 않지만, 수신한 정보에 응답하는 액티비티를 시작하거나, 
    사용자에게 알려주기 위한 알림 매니저를 사용할 수 있다.

- onReceive()
  - BroadcastReceiver 클래스를 확장한 서브 클래스 형태로 구현 
  - 오버라이딩으로 사용한다. 

- android:textAppearance="@style/TextAppearance.AppCompat.Large"
  - 여러 가지 속성들에 대해 시스템에 미리 정해진 형식에 따라 한번에 설정하도록 만들어주는 속성

- <user-permission android:name="android.permission.RECEIVE_COOT_COMPLETED" />
  - 부팅 완료 시정을 알아내기 위한 권한 설정 

- <receiver 
    android:name=".MyReceiver"
    android:enabled="true"
    android:exported="true">
    <intent-filter>
      <action android:name="android.intent.action.BOOT_COMPLETED/>
    </intent-filter>
- </receiver> 
  - 리시버 등록 과정을 수행 
  - intent-filter (인텐트필터)
    - 인텐트필터는 앱 컴포넌트가 받고자 하는 인텐트를 정의하는 수단 
    - 인텐트 객체 내의 정보들을 바탕으로 인텐트를 필터링하기에 인텐트 객체 내의 정보들을 바탕으로 자신이 받을 수 있는 정보들을 정의 
    - 객체 내의 여러 정보들을 바탕으로 가장 적절한 컴포넌트를 찾는 과정
    - 각 컴포넌트는 자신이 받을 수 있는 인텐트의 종류를 매니페스트 파일에 정의

- public void onReceive( Context context, intent intent) { }
  - 원하는 브로드캐스트 메시지가 도착하면 호출 애플리케이션 Context를 사용할 수 있으며 Intent를 통해 동작을 구분 

- if(intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) { }
  - 등록한 브로드캐스트리시버 액션이 여러 개인 경우 구분이 필요 

- intent01.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
  - 인텐트 플래그를 이용하여 상황에 맞게 동작하도록 설정 
  - 여러 설정을 동시에 적용하기 위하여 여러 플래그를 작성 
  - 새로운 테스크 생성, 실행 액티비티 외 모두 제거, 상위 스택 제거 
  - addFlags : 기존 Flag에 + 새 Flag를 추가한다.

  - 인텐트 플래그 
    - 인텐트 플래그는 액티비티의 실행, 관리에 대한 정보 등을 설정할 수 있고 이를 통해 액티비티 스택, 인텐트 상태 등을 컨트롤 할 수 있다. 
    - Activity의 중복 문제나 흐름을 제어하고 싶을 때 사용한다. 

=====================================================================================================
- 11장 
- 테스크, 액티비티 플래그 ( 기능 실습 23 ) 

- 액티비티와 테스크 
  - 액티비티 : 같은 애플리케이션 내에 존재하는 액티비티 뿐만 아니라 다른 애플리케이션 내에 존재하는 액티비티까지 호출 가능 
  - 태스크 : 사용자가 실질적으로 "하나의 애플리케이션처럼" 느끼는 액티비티들의 집합 

- 액티비티 플래그
  - FLAG_ACTIVITY_SINGLE_TOP 
    - 재호출 하는 경우, 액티비티를 재사용 
    - A 이후 B호출 그 다음에 B를 한번더 호출하는 경우 기존의 B 액티비티를 재사용한다. 

  - FLAG_ACTIVITY_NO_HISTORY
    - 액티비티 사용 기록을 남지기 않음 
    - A 이후 B호출 그 다음에 A를 호출 하는 경우 기존에 있는 B 액티비티를 지우고 A를 호출한다. 

  - FLAG_ACTIVITY_REORDER_TO_FRONT
    - 기존 액티비티를 가장 앞으로 가지고 온다.
    - A 이후 B호출 그 다음에 A를 호출 하는 경우 기존에 A 액티비티를 상단으로 올려서 사용한다. ( B 액티비티는 아래로 내려감 )

  - FLAG_ACTIVITY_CLEAR_TOP
    - 액티비티가 존재하는 경우 상위 액티비티 모두 제거 
    - A 이후 B호출 그 다음에 A를 호출 하는 경우 가장 밑에 A 액티비티가 생성 되었기 때문에 위에 생성된 액티비티를 모두 지우고 가장 밑의 A를 호출 

=====================================================================================================
- 11장 
- Notifications ( 기능 실습 24 ) 

- 알림 ( Notification )
  - 시스템이 사용자에게 무엇인가를 알릴 때 사용 
  - SNS, 약속시간 등 

- NotificationManager 클래스 
  - 알림 메시지를 사용하기 위해 필요 
  - getSystemService() 메소드의 NOTIFICATION_SERVICE 를 지정함으로써 얻을 수 있음 
  - 알림 매니저를 보내기 위해 notify() 메소드에 Notification 클래스의 인스턴스를 매개변수로 전달하여 호출 
  - 알림 메시지를 표시하는데 필요한 각종 정보를 담고 있음 
  - 재생하는 오디오 타입, 소리, 진동, 점멸의 기존 통지 방법 등 다양한 필드가 있어 여러 기능을 갖는 알림 서비스를 만들 수 있다. 

- 알림 이미지 준비 
  - 5.0 이후에는 알파값이 있는 단색 아이콘이어야 정상적으로 표현 

- 프로젝트 구조 
  - Notification을 생성할 Activity 1개 
  - 발생한 알림을 선택할 때, 해당 정보를 표시할 Activity 1개 
  - 각 ACtivity에 대한 레이아웃 
  - Notifications에 사용할 이미지 1개 이상 

- <user-permission android:name="android.permission.POST_NOTIFICATIONS" />
  - Notification 기능 활성화를 위한 권한 

- getSystemService(Context.NOTIFICATION_SERVICE);
  - Notification 표시할 객체 생성 

- if( Build.VERSION.SDK_INT >= uild.VERSION_CODES.OS코드명) {
    ActivityCompat.requestPermissions(activity:this, new String[] {Manifest.permission.POST_NOTIFICATIONS}, MODE_PRIVATE ); 
  }
  - Notification 기능을 관련 권한 요청 
  - 현재 장치의 OS 버전이 특정 OS 버전보다 높거나 같을 때 권한 요청을 해라 

  - Build.VERSION.SDK_INT
    - 앱이 구동되고 있는 장치의 안드로이드 OS 버전
  
  - Build.VERSION_CODES.OS코드명 
    - 각 OS 버전 

- new Intent ( 현재Activity.this, 데이터를 넘겨줄Activity.class );
  - 현재 액티비티는 this, 데이터를 넘겨줄 Activity는 class 로 구별한다. 

- PendingIntent.getActivity( MainActivity.this, 0, toLaunch, PendingIntent.FLAG_IMMUTABLE );
  - 인자값 ( 현재 Activity, 0, Intent, PendingIntent 옵션 )
  - 다른 어플리케이션의 권한을 허가하여, 가지고 있는 Intent를 마치 본인 앱의 프로세스에서 실행하는 것처럼 사용한는 것
  - Intent를 바로 실행하는 것이 아닌, 특정 시점에 수행하도록 하는 역할 

  - Activity/Service 등과 같은 특정 Component가 Intent를 생성한 후에 해당 Intent를 바로 사용하는 대신에 
    다른 Component가 해당 Intent를 사용 할 수 있도록 할 때 사용하는 클래스 

- 버전에 따라서 구현하는 로직이 달라진다. ↓
- if( Build.VERSION.SDK_INT < uild.VERSION_CODES.OS코드명) {
     notify = new Notification.Builder(getApplication())                          - Notification 생성
              .setContentTitle(expandedtitle)                                     - 확장 상태바 제목 
              .setContentText(expandedText)                                       - 확장 상태바 표시 내용 
              .setSmallIcon(R.drawable.baseline_notifications_none_white_24)      - 아이콘
              .setAutoCancle(true)                                                - 확인 시 사라지게 함 
              .setContentIntent(intentBack)                                       - 선택시 동작할 인텐트 지정 
              .setWhen(System.currentTimeMillis())                                - 설정한 값을 기반으로 생성 
              .build();
  }
- if( Build.VERSION.SDK_INT >= uild.VERSION_CODES.OS코드명) { 
    
  }
  
- notifier.notify(NOTIFY_1, notify);
  - NotificationManager를 통한 notification 실행 
