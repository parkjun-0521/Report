#include <stdio.h>
#include <string.h>
#define MAX 10                                          // 최대 자릿수 결정

void length(int lrngth, char team[MAX]);                //왼쪽 문자열을 오른쪽으로 정렬하는 함수  (입력받은 문자열 길이, 입력을 저장 해 놓은 배열)
void multiply(char a[MAX], char b[MAX], char c[MAX]);   // 입력 받은 문자열을 곱셈하는 함수  (윗줄, 아래줄, 결과값)

void main()
{
	int i;                                                // for문을 돌릴 변수 선언 
	int lengthUp = 0, lengthDw= 0;                        // 문자열 길이 변수 선언 및 초기화 
	char up[MAX] = {0, };                                 // 윗줄 숫자 문자열 변수
	char dw[MAX] = {0, };                                 // 아래줄 숫자 문자열 변수
	char sum[MAX + 1] = { 0, }; 

	// 배열 초기화 (배열 안에 어떤 쓰레기 값이 들어있을지 모르니 0으로 초기화 해주었다.
	for (i = 0; i < MAX; i++)   
	{
		up[i] = '0';                                         // up변수의 모든 자리를 0으로 초기화 
		dw[i] = '0';                                         // dw변수의 모든 자리를 0으로 초기화 
	}

	//숫자 입력 받기 
	printf("Input Up Number : ");    
	scanf_s("%s", up, sizeof(up));                         // 윗줄 숫자 받기 

	printf("Input Dw Number : ");
	scanf_s("%s", dw, sizeof(dw));                         // 아래줄 숫자 받기 
	
	lengthUp = strlen(up);                                 // 윗줄 문자열 길이를 lengtUp에 저장 
	lengthDw = strlen(dw);                                 // 아래줄 문자열 길이를 lengtDw에 저장  


	//받은 숫자를 오른쪽으로 정렬해서 출력하기 
	length(lengthUp, up);                                   // 오른쪽으로 문자열 정렬하는 함수 
	length(lengthDw, dw);                                   // 오른쪽으로 문자열 정렬하는 함수

	// 위줄 우측 정렬 및 입력한 문자열 출력
	for (i = 0; i < MAX; i++){
		printf(" %c", up[i]);
	}

	printf("\n\n");

	// 아래줄 우측 정렬 및 입력한 문자열 출력
	for (i = 0; i < MAX; i++){
		printf(" %c", dw[i]);
	}

	printf("\n\n");

	// 곱셈 연산 만들기 
	multiply(up,dw,sum);                                       // 곱셈 연산 함수 (윗줄, 아래줄, 결과값을 넣을 변수)


	// 곱셈 연산 출력하기
	// 곱셈할 때 아스키 코드('0')로 문자열을 빼서 숫자로 만들어 계산해놓았기 때문에 출력할 때 %c 가 아닌 %d로 출력한다.
	for (i = 0; i < MAX;i++)
	{
		printf(" %d", sum[i]);
	}
} 


//오른쪽 정령 함수  (입력받은 문자열 길이, 입력을 저장 해 놓은 배열)
void length(int lrngth, char team[MAX]) 
{
	int i = 0;                                                    // for문을 돌 변수 선언 
	
	// 오른쪽 정렬은 배열안에서 바로 옮길 수 없기때문에 빈배열을 선언 하여 빈배열의 오른쪽에 넣어 놨다가 다시 원래 배열로 옮겨줘야 한다 
	char a[MAX] = { 0, };  
	
	for (i = 0; i < MAX; i++)                                     // 빈 배열을 초기화 
	{
		a[i] = '0';
	}

	// 오른쪽으로 문자열을 이동 시키기 위해서 
	// 최대문자열 길이 에서 입력받은 문자열 길이 만큼 빼준 만큼을 배열에 넣으면 둘의 차이만큼 문자열이 뒤로 이동한다. 
	// 뒤로 이동 한 상태에서 배열이 내가 입력한 문자열의 길이 만큼 한칸씩 증가해야만 입력한 문자열이 배열에 맞게 들어가기 때문에 i를 더해준다. 
	for (i = 0; i < lrngth; i++) {
		a[MAX - lrngth + i] = team[i];
	}

	// 오른쪽으로 이동 시킨 문자열을 다시 return 시킬 배열에 넣어준다 
	for (i = 0; i < MAX; i++) {
		team[i] = a[i];
	}
}


// 곱셈 연산 (윗줄, 아래줄, 결과값을 넣을 변수)
void multiply(char a[MAX], char b[MAX], char c[MAX])  
{
	int i,j;  // 2중 for 문을 돌기 위한 변수 선언
	int value = 0, index = 0;                                       // value = 아스키 코드값을 뺀 문자열을 서로 곱한 결과값을 담는 변수
	                                                                // index = 곱하기할 때 올림수 및 내림수의 값을 원하는 배열 위치로 넣어주기 위해 만든 변수 
	for (i = MAX - 1; i > 0; i--) {
		for (j = MAX - 1; j > 0; j--) {
			value = (a[j] - '0') * (b[i] - '0');  
			// a의 0부터 ~ MAX-1 까지, b의 0부터 ~ MAX -1 까지 모든 자리수를 곱한 값을 for문이 돌 때마다 각각 저장 
			if (value > 0) { 
				index = i + j - MAX;
				// 윗자리 마지막 에서 부터 시작 해서 아래자리 마지막 ~ 0 까지 곱하고 
				// 아래자리 마지막 에서 부터 시작 해서 윗자리 마지막 ~ 0 까지 곱하기 위해서 배열의 위치를 지정하기 위한 변수
				c[index + 1] = c[index + 1] + (value % 10); 
				// 매번 곱하기의 첫번째 내림수를 저장한다.
				// 두번째 자리 이후 곱하기 부터는 내림수의 합이 10이 넘어 갈 수도 있지만 10이 넘어가면 4번째줄 코드에서 내림값을 산출해주니 아무런 지장이 없다
				// 두번째 자리 이후 곱하기는 내림수와 올림수의 합만 구한다.
				c[index] = c[index] + (value / 10); 
				// 매번 곱하기의 올림수를 저장한다. 
				c[index] = c[index] + (c[index + 1] / 10); 
				// 첫번째 자리 곱하기때는 첫번째 올림수를 저장하지만 
				// 두번째 자리 이후 곱하기 부터는 첫번째 곱하기 올림수 + 두번째 자리의 내림수의 합이 10이 넘었을때 그것을 나누기 10을 하여 올림수를 한번더 계산하여 더함. 
				// 두번째 곱하기 이후 부터 실질적인 올림수 역활을 한다.
				c[index + 1] = c[index + 1] % 10; 
				// 첫번째 자리 곱하기때는 첫번째 내림수를 저장하지만 
				// 두번째 자리 이후 곱하기 부터는 올림수 + 내림수의 합이 10을 넘었을때 나머지를 구해 내림값을 저장한다.
				// 두번째 자리 이후 실질적인 내림수 값은 여기서 결정한다.
			}
		}
	}
}
