// c++ 복습 
#include<iostream>
using namespace std;

/*
// 함수 선언
void sub();

// 전역 변수 선언 
int a = 100;

// 기본 클래스 생성 
class Car {
	Car() {
		cout << "생성자 호출" << endl;
	}
public : 
	int a = 0;
	int b = 0;
	int c = 0;

	void test();

	void GetPlus() {
		a = 100;
		b = 200;
		c = a + b;
	}
	void SetPlus() {
		cout << "a + b = " << c << endl;
	}

	~Car() {
		cout << "소멸자 호출" << endl;
	}
};

void Car::test() {
	cout << "class 함수" << endl;
}
// main 함수 
int main() {
	char name[100];
	cout << "안녕하세여" << endl;
	cin >> name;

	cout << name << endl;

	sub();
	return 0;
}

// sub 함수 
void sub() {
	cout << "함수 출력" << endl;
}
*/

// define 변수 정의 
#define KOOKMIN 1
#define HANA 2
#define SHINHAN 3
#define SANUP 4
#define DEPOSIT 1
#define LOAN 2
#define BUSINESS 3
#define INTEREST_CHANGE -0.005

// main class 
class interest {
protected:
	double saving;
	double lend;
public:
	// 가상함수 ( 오버라이딩 )
	virtual void deposit(int, double);

	// 함수 외부 정의 
	void loan(int, double);
	void loan(int, int, double);

	// 연산자 오버로드 
	void operator += (double val);

	// 생성자
	interest(double s, double l);
};


void interest::deposit(int bank, double money) {
	cout << "저축 이율 : " << saving << endl;
	cout << "저축 총액 : " << money + (saving * money) << endl;
}

void interest::loan(int bank, double money) {
	cout << "대출 이율 : " << lend << endl;
	cout << "갚아야 하는 대출 총액 : " << money + (lend * money) << endl;
}

void interest::loan(int bank, int special, double money) {
	cout << "대출 이율 : " << lend << endl;
	cout << "갚아야 하는 대출 총액 : " << money + (lend * money) << endl;
}

// 생성자
interest::interest(double s, double l) {
	saving = s;
	lend = l;
}

// 연산자 오버로드 구현 
void interest::operator += (double change) {
	saving += change;
	lend += change;
}


// =======================================================================================//
// sub class ( main을 상속 받음 ) 
class sanup_interest :public interest {
	double business;
public:
	void deposit(int, double);
	void business_loan(int, double);
	sanup_interest(double s, double l, double b);
};

// 오버라이딩 
void sanup_interest::deposit(int bank, double money) {
	cout << "반갑습니다 히든 이벤트입니다." << endl;
	cout << "저축 이율 : " << saving << endl;
	cout << "저축 총액 : " << money + (saving * money) << endl;
}

sanup_interest::sanup_interest(double s, double l, double b) :interest(s, l) {
	business = b;
}

void sanup_interest::business_loan(int bank, double money) {
	cout << "대출 이율 : " << business << endl;
	cout << "갚아야 하는 대출 총액 : " << money + (business * money) << endl;
}

// 객체 생성 
interest kookmin(0.03, 0.035), hana(0.032, 0.033), shinhan(0.031, 0.032);
sanup_interest sanup(0.04, 0.041, 0.04);
sanup_interest* Banks;


//============================================================================//
// 메인 함수 
int main() {
	int bank, type, special;
	double money;
	cout << "국민이면 1, 하나이면 2, 신한이면 3, 산업이면 4 를 입력하시오 : ";
	cin >> bank;
	cout << "저축이면 1, 대출이면 2, 산업자금 3 을 입력하시오 : ";
	cin >> type;
	cout << "금액을 입력하세요 : ";
	cin >> money;

	switch (bank) {
		case KOOKMIN:
			if (type == DEPOSIT) 
				kookmin.deposit(KOOKMIN, money);
			else
				kookmin.loan(KOOKMIN, money);
			break;
		case HANA:
			if (type == DEPOSIT)
				hana.deposit(HANA, money);
			else
				hana.loan(HANA, money);
			break;
		case SHINHAN:
			if (type == DEPOSIT)
				shinhan.deposit(SHINHAN, money);
			else
				shinhan.loan(SHINHAN, money);
			break;
		case SANUP:
			if (type == DEPOSIT)
				sanup.deposit(SANUP, money);
			else if(type == LOAN)
				sanup.loan(SANUP, money);
			else 
				sanup.business_loan(SANUP, money);
			break;
	}

	
	*Banks += INTEREST_CHANGE;

	return 0;
}
