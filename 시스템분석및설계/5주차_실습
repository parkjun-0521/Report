==========================================================================================
추상클래스 기본 형식 
추상클래스를 시용 시 abstract 를 사용하여 가상함수를 표시 
==========================================================================================

package Test_1;

// 추상클래스 
abstract class Figure {
	public void setColor(String color) {
		System.out.println("새로운 색으로 변경");
	}
	// 가상함수 
	abstract public void move(int x, int y);
}

class Point extends Figure{
	int x,y;
	public void move(int x, int y) {
		System.out.println("점이 " + x + ',' + y + "만큼 이동됨.");
	}
}

class Circle extends Figure{
	int x,y;
	int r;
	public void move(int x, int y) {
		System.out.println("원의 중심이 " + x + ',' + y + "만큼 이동됨.");
	}
}

class Rectangle extends Figure{
	int x,y;
	int width;
	int height;
	public void move(int x, int y) {
		System.out.println("사각형이 " + x + ',' + y + "만큼 이동됨.");
	}
}

// Figure 클래스의 메인 구동 클래스 
public class Controller {
	static Figure figures[] = new Figure[3];
	static int count = 0;
	public static void addFigure(Figure f) {
		figures[count++] = f;
	}
	public static void moveAll(int x, int y) {
		for (int i=0;i<count; i++)
			figures[i].move(x, y);
	}
	

	public static void main(String[] args) {
		Point p = new Point();
		Circle c = new Circle();
		Rectangle r = new Rectangle();
		
		// 상속이 되어 있어야 한다. 
		addFigure(p);
		addFigure(c);
		addFigure(r);
		
		// 한번의 메시지로 3개의 객체의 함수를 실행, => 동적 바인딩 
		moveAll(5,5);
	}
}



==========================================================================================
인터페이스 기본 사용 
- 자식클래스가 여러 부모 클래스를 상속받을 수 있다면, 다양한 동작을 수행할 수 있다는 장점을 가진다
- 이러한 다중 상속을 자바는 지원하지 않는데 이것을 인터페이스라는 것을 통해 다중 상속을 지원한다. 
==========================================================================================
package Test_1;

public interface Remote_Controller {
	public void powerOn();
	public void powerOff();
}

class BeamProjector implements Remote_Controller{

	public void powerOn() {
		System.out.println("빔의 전원이 켜졌습니다.");
	}

	public void powerOff() {
		System.out.println("빔의 전원이 꺼졌습니다.");				
	}
	
}

// 인터페이스 메인 클래스 
package Test_1;

public class Controller {
	public static void main(String[] args) {
		BeamProjector bp = new BeamProjector();
		
		bp.powerOn();
		bp.powerOff();
	}
}



==========================================================================================
오버로딩과 오버라이딩 
- 오버로딩 : 하나의 클래스 내에서 함수가 중첩으로 사용되는 것을 말한다. 
             메소드의 이름은 같기 때문에 매개변수로 구분을 한다. 
             즉 동일한 메소드 이름이 같고 매개변수또한 같으면 에러가 발생한다.
- 오버라이딩 : 부모클래스와 자식클래스 관계에서 일어나는 것으로 
              부모클래스의 함수와 동일한 함수를 자식이 가지고 있는것을 말한다.
              오버라이딩은 클래스가 무조건 상속이여야 한다. 
==========================================================================================
- 오버로딩

class Tree {
	String name;
	// 생성자
	public Tree(){
		System.out.println("Tree 객체가 생성됨");
	}
	// 함수 오버로딩 
	public Tree(String name) {
		System.out.println("이름이 " + name + " 인 Tree객체가 생성됨");
	}
}


public class Controller {
	public static void main(String[] args) {
		Tree t1 = new Tree();
		Tree t2 = new Tree("소나무");
	}
}

==========================================================================================
- 오버라이딩 

package Test_1;

// 추상 클래스라 객체를 생성하지 못함
abstract class File {
	String name;
	public void open() {
		System.out.println("파일이 열렸습니다");
	}
	public abstract void print();
}

class pdf_File extends File{
	public void open() {
		System.out.println("pdf 파일이 열렸습니다");
	}
	public void print() {
		System.out.println("pdf 파일 출력");
	}
}

class jpg_File extends File{
	public void open() {
		System.out.println("jpg 파일이 열렸습니다");
	}
	public void print() {
		System.out.println("jpg 파일 출력");
	}
}


public class Controller {
	public static void main(String[] args) {
		pdf_File pdf = new pdf_File();
		jpg_File jpg = new jpg_File();
		
		pdf.open();
		jpg.open();
		
		pdf.print();
		jpg.print();
	}
}
