1장 객체지향의 개요 
이름 : 박준
학번 :201904027
일시 : 2022. 09. 27

1. 객체의 정의 
	- 객체는 데이터의 값을 가질수 있다.
	- 데이터 + operation 에 맞는 모듈 
	- 눈에 보이거나 만져서 인지가 가능한 사물 
	- 객체는 데이터와 그 데이터를 처리하는 함수들로 구성된 하나의 모듈 
	- 데이터는 객체의 상태를 제공 
	- 함수는 객체의 행위를 의미 
	- 객체는 추상화의 단위 
	- 객체는 캡슐화와 정보은닉을 지원 

2. 클래스 
	- 클래스는 데이터의 값을 가질수 없다.
	- 객체를생성할 수 있는 구조와 정보를 가지고 있는 틀 
	- 클래스는 사용자 정의 타입이 된다
	- 클래스는 객체 타입을 소프트웨어적으로 구현하는 장치이다.
	- 객체들에 대한 소스코드 조감도이다. 

3. 캡슐화 
	- 관련된 데이터와 메소드를 하나의 클래스 속에 포함시키는 메커니즘 
	- 캡슐화는 객체지향 언어에서만 존재하는 게 아니다. ( C도 구조체가 있다. ) 
	- 객체지향 언어에서는 완벽히 제공한다. ( class ) 

4. 정보은닉 
	- 특정 정보들을 외부에 노출시키지 않는 것 
	- 공개 범위를 Private로 지정한다. 
	- 외부에 어떤 서비스를 제공할 수 있는지만 명시 
	- 어떻게 구현 되었는가는 외부에 공개하지 않음 

5. 모델 
	- 현실의 물체를 보고 계획/구현 하는 것을 모델이라 한다.
	- 현실의 단순화 및 가시화를 통해 개발 시스템의 계획/구상을 표현 

6. 모델링 
	- 모델을 만드는 작업으로써 품질이 좋은 소프트웨어를 개발 및 배치할 수 있게 	  하는 모든 활동.
	- 목적 
	  - 시스템을 원하는 모습으로 가시화 
	  - 시스템을 구축하는 기본 형태를 제공 

	- 중요성 
	  - 모델링은 복잡한 현실세계를 이해하기 쉽도록 단순화 하는 작업 
	  - 분석 설계를 제대로 하지 않으면 테스트 작업에서 많은 에러가 발생 

7. 객체지향 프로그래밍 
	- 개념 
	  - 현실세계에 존재하는 실체 및 개념들을 객체라는 독립 단위로 구성하고, 이를 	    객체들이 메시지를 통하여 상호작용함으로써 전체 시스템이 운영되는 개념 
	  - UML을 이용하여 설계 
	  - class를 이용하여 각 부분을 구현하고 class를 호출하여 main을 구현 
	  - 객체지향은 캡슐화, 정보은닉, 공개 인터페이스, 상속, 클래스 개념으로 구성 

8. 객체지향 설계
	- 정적 설계를 위한 다이어그램 
	  - class들 간의 관계를 정의 
	- 동적 설계를 위한 다이어그램 
	  - class들 간의 흐름 정의 
	- 견고한 설계는 다양한 시각에서 설계해야한다.
	  - 논리 관점, 구현관점, 프로세스 관점, 배포 관점 

9. 패러다임 
	- 구조적 패러다임 
	  - 데이터와 함수들을 서로 독립적인 관계처럼 취급 
	  - 프로그램 구성단위가 함수 
	  - 기본적으로 순차적 접근이 되는 방식 
	  - 데이터와 그 데이터를 처리하는 방식이 분리 되어있다. 
	  - 유지보수에 문제가 발생 

	- 객체지향 패러다임 
	  - 객체라는 개념을 통해 데이터와 그 데이터를 처리하는 방식을 통합 
	  - 프로그램 구성 단위가 객체 

10. UML 
	- 개요
	  - 설계도와 같은 역할 
	  - 시스템 개념적 / 물리적 모델이 필요 

	- 목적 
	  - 객체지향을 이용한 시스템 모델링 
	  - 개념적 산출물과 실행가능 산출물간의 명시적 결합 설정 
	
	- 특징 
	  - 가시화 언어 : 그래픽 형태로 작성  
	  - 명세화 언어 : 모델을 정확하고 완전하게 명세화 가능 
	  - 구축 언어   : 다양한 프로그래밍 언어로 표현 가능 
	  - 문서화 언어 : 모든 상세 내역에 대한 문서화를 제공 
	- 용도 
	  - UML은 구축할 시스템의 유형에 관계없이 적용될 수 있다. ( 꼭 웹에만 적용이 	    되는것이 아니다. 다른 분야 쪽에서도 사용이 가능하다. )
    	  - UML은 개발 방법론에 관계없이 적용될 수 있다
    	  - UML은 프로그래밍 언어와 관계없이 적용될 수 있다. ( 프로그래밍 언어가 	    무엇이든지 UML을 작성할 수 있다. ) 
    	  - case 도구에 관계없이 적용될 수 있다 
