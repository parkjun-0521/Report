- 객체와 class 

- 객체의 정의 
  - 데이터 + operation 에 맞는 모듈 
  - 자신이 필요한 데이터와 오퍼레이션이 필요 
  - 객체는 데이터의 값을 가질 수 있다. 

- 클래스 
  - 클래스는 데이터 값을 가질 수 없다 
  - 객체를 생성할 수 있는 구조와 정보를 가지고 있는 틀 
  
  - 정의 
    - 클래스는 특정 종류의 모든 객체들이 공통적으로 갖는 상태와 행위를 기술하는 조감도이다.
    - 클래스는 사용자 정의 타입으로 사용된다.
    - 한 클래스가 하나의 데이터 타입이 된다.
    - 한 객체는 한 클래스의 개별적 실 사례이다. 
    - 객체들에 대한 소스코드 조감도이다. 
    - 클래스는 객체 타입을 소프트웨어적으로 구현하는 장치이다
    - 클래스는 자료 구조와 그 자료구조를 처리하는 함수들을 명시한다 
  
● 클래스와 객체의 수는 같다. 

- UML에서 operation 부분은 캡슐화를 하는 부분이다. 
- 캡슐화 와 정보은닉은 엄연히 다른것이다.
  - 캡슐화는 오퍼레이션 부분이다.
  - 정보은닉은 public, privete, protected 를 말한다. 
  
- 캡슐화
  - 정의
    - 관련된 데이터와 메소드를 하나의 클래스 속에 포함시키는 메커니즘 
  
  - 특징
    - 캡슐화는 객체지향 언어에서만 존재하는 게 아님 ( c의 구조체로 예를 들 수 있음 ) 
    - 객체지향 언어에서는 완벽히 제공하는 것 ( 클래스 ) 
    
- 정보은닉 
  - 원칙 
    - 블랙박스 방식 
    - 특정 정보들을 외부에 노출시키지 않는 것 
    - Private로 설정 
    - public을 통해서만 수행 가능 
    
  - java, c++
    - public 
    - proticted
    - private
    
  - 외부에 어떤 서비스를 제공할 수 있는지만 명시 
  - 어떻게 구현되었는지는 외부에 제공하지 않음 
  
  - 이점
    - 정보은닉은 객체에 대한 추상화를 높여준다
    - 모듈의 독립성을 높여준다
    - 유지보수성을 향상시킨다
    - 확장성을 높여준다
    - 세부 알고리즘이 다른 객체에 영향을 주지 않고 변경시킬 수 있다. 
    
    
- 캡슐화 와 정보은닉 
  - 캡슐화는 단지 관련된 데이터와 함수들을 묶는 장치 
  - 정보은닉은 한 클래스 내의 세부 사항들을 숨기는 장치 
  
- 메시지 
  - 객체들 사이의 상호작용 수단이다. 
  - 어떤 한 객체가 다른 객체에게 특정 작업을 요청하는 신호다.
  - 한 객체가 다른 객체에게 메시지를 전송함으로써 다른 객체에 접근할 수 있다. 
  - 객체들간의 통신을 위한 유일한 수단 
  - 한 메시지 속에는 함수 이름과 필요한 매개변수로 구성됨 
  - 





