사용자에게 편리한 언어는 high level 
컴퓨터에세 편리한 언어는 low level 

* 개발 패러다임 진화 방향 
  - 객체지향 개념 -> 객체지향 설계 -> 검포넌트 설계 -> 서비스 지향 설계 

* 모델링 개요 
  - 모델링 = 시스템 분석 및 디자인
  - 게임을 설계하는 과정을 '모델링' 이라고 한다. 
  - 모델을 만들고 그것이 제대로 구현이 되면 시스템이 되는것 
  - 모델을 표현할 때 사용하는 언어는 UML 

* 모델 
  - 현실의 물체를 보고 계획 / 구현하는 것을 모델이라 한다.

* 모델링 모적 
  - 시스템을 원하는 모습으로 가시화 
  - 시스템의 구조와 행동을 명세화 
  - 시스템을 구축하는 기본 형태를 제공 
  - 시스템 분석 / 설계의 문서화 
  
* 모델링의 중요성 
  - 모델링은 복잡한 현실세계를 이해하기 쉽도록 단순화하는 작업 
  - 분석설계를 제대로 하지않으면 테스트 작업에서 에러가 많이 발생 
  - 분석설계를 제대로 해야 테스트시 에러가 많이 발생하지 않음 
  
* 모델링 vs 프로그래밍 
  - 요구사항 정의, 분석, 설계 는 모델링 작업 ( UML ) 
  - 구현 은 프로그래밍 작업 ( UML에 맞는 언어 사용 ) 

* 객체지향 개념 
  - 과거에는 구조적 개발 방법을 사용 
    - 소프트웨어를 단위 모듈로 분할하여 전체 프로그램의 구조응 세부적으로 쪼갠 후 각 부분을 구현하고 통합하여 완성하는 방법 
    - 구조도를 이용 ( tree ?? ) 
    - 함수를 사용하여 부분을 구현하고 main에서 병합하는 방법 
    
  - 객체지향 개발 방법 
    - 현실세계에 존재하는 실체 및 개념들을 객체라는 독립된 단위로 구성하고, 이 객체들이 메시지를 통하여 상호작용함으로써 전체 시스템이 운영되는 개념 
    - UML을 이용하여 설계 
    - class를 이용 하려 각 부분을 구현하고 class를 호출하여 구현 
  
* 구조적 패더다임 
  - 데이터와 함수들이 서로 독립적인 관계처럼 취급 
  - 프로그램 구성 단위가 함수 
  - 기본적으로 순차적으로 접근이 되는 방식 
  - 데이터와 그 데이터를 처리하는 방식이 분리 
  - 유지보수에 문제가 있다 
  
* 객체지향 패러다임 
  - 객체라는 개념을 통해 데이터와 그 데이터를 처리하는 방식을 통합 
  - 프로그램 구성 단위가 객체 
   
* 객체지향 모델링 
  - 정적설계와 동적설계로 구성  
  
* UML 개요 
  - 설계도와 같은 역할 
  - 시스템 개념적 / 물리적 모델이 필요 
  
  - 목적 
    - 객체지향을 이용한 시스템 모델링 
    - 개념적 산출물과 실행 가능 산출물간의 명시적 결합 설정 
    
  - 기능 
    - 요구 정의 단계에서 최종 테스팅에 이르는 단계에 사용
    
  - 개념 
    - 통합 모델링 언어 
    - 객체지향 개바 분야에서 가장 우수한 모델링 
    
  - UML 특징 
    - 가시화 언어 : 그래픽 형태로 작성 
    - 명세화 언어 : 모델을 정확하고 완전하게 명세화 가능 
    - 구축 언어   : 다양한 프로그래밍 언어로 표현 가능 
    - 문서화 언어 : 모든 상세 내역에 대한 문서화를 제공 
    
  - 용도 
    - UML은 구축할 시스템의 유형에 관계없이 적용될 수 있다 
    - UML은 개발 방법론에 관계없이 적용될 수 있다
    - UML은 프로그래밍 언어와 관계없이 적용될 수 있다
    - case 도구에 관계없이 적용될 수 있다 ( UML이 아닌 다른 것으로도 적용 가능 ) 
      
  - 견고한 설계는 다양한 시각에서 설계 
    - 논리 관점, 구현 관점, 프로세스 관점, 배포 관점 ...
    
  - 정적 설계 와 동적 설계 
    - 정적 설계 : class들 간의 관계 및 구조를 정의 
    - 동적 설계 : class들 간의 기능 및 흐름을 정의 
    
* 객체지향 프로그래밍 
  - 정적설계는 구조를 보고 전체적인 구조를 프로그래밍 
  - 동적설계는 흐름을 보고 전체적인 기능을 프로그래밍 
  
* 객체지향의 핵심 개념 
  - 객체지향은 캡슐화, 정보은닉, 공개 인터페이스, 상속, 클래스 등의 개념으로 구성 
  
* 객체 
  - 현실세계에 실제적으로 존재하는 것을 모두 말함 
  - 개념들 중 소프트웨어 개발 대상을 말함 
  
  - 정의_1
    - 눈에 보이거나 만져서 인지가 가능한 사물 ( 물리적 객체 )
    - 생각이나 행동이 이루어지는 개념 ( 개념적 객체 )
    
  - 정의_2
    - 객체는 데이터와 그 데이터를 처리하는 함수들로 구성된 하나의 모듈이다 
    - 데이터는 객체의 상태를 제공 ( 맴버 변수를 의미 )
    - 함수는 객체의 행위를 의미한다 ( 맴버 함수를 의미 ) 
    
  - 정의_3
    - 객체는 추상화의 단위이다
    - 객체는 캡슐화와 정보은닉을 지원한다
    
* 객체 연습 ( 이클립스 class명 Cicle ) 
package test;

class test {
	int cneter_x;
	int cneter_y;
	float radius;
	
	public void setRadius(float r) {
		radius = r;
	}
	public void circumference() {
		float circ;
		circ = 2 * 3.14f * radius;
		System.out.println("원 둘레 = " + circ);
	}
	public void areaOf() {
		float area;
		area = 3.14f * radius * radius;
		System.out.println("원 면적 = " + area);
	}	
}

public class Cicle {
	public static void main(String args[]) {
		test c1=new test( );
		test c2=new test( );
		c1.setRadius(4.67f);
		c1.circumference( );
		c1.areaOf( );
		c2.setRadius(10.5f);
		c2.areaOf();
	}
}

* staruml 에서
- 데이터 형은 변수 뒤에 : 을 붙여 써준다 
- ex ) setRadius(r: float): void 
- ex2) center_y: int
- ex3) main(args: sting[]): void
- 위와 같은 형식으로 작성 
  
    
    
  
  
  
  
  
  
  
  
  
  
  
    
    
  
