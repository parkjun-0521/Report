사용자에게 편리한 언어는 high level 
컴퓨터에세 편리한 언어는 low level 

* 개발 패러다임 진화 방향 
  - 객체지향 개념 -> 객체지향 설계 -> 검포넌트 설계 -> 서비스 지향 설계 

* 모델링 개요 
  - 모델링 = 시스템 분석 및 디자인
  - 게임을 설계하는 과정을 '모델링' 이라고 한다. 
  - 모델을 만들고 그것이 제대로 구현이 되면 시스템이 되는것 
  - 모델을 표현할 때 사용하는 언어는 UML 

* 모델 
  - 현실의 물체를 보고 계획 / 구현하는 것을 모델이라 한다.

* 모델링 모적 
  - 시스템을 원하는 모습으로 가시화 
  - 시스템의 구조와 행동을 명세화 
  - 시스템을 구축하는 기본 형태를 제공 
  - 시스템 분석 / 설계의 문서화 
  
* 모델링의 중요성 
  - 모델링은 복잡한 현실세계를 이해하기 쉽도록 단순화하는 작업 
  - 분석설계를 제대로 하지않으면 테스트 작업에서 에러가 많이 발생 
  - 분석설계를 제대로 해야 테스트시 에러가 많이 발생하지 않음 
  
* 모델링 vs 프로그래밍 
  - 요구사항 정의, 분석, 설계 는 모델링 작업 ( UML ) 
  - 구현 은 프로그래밍 작업 ( UML에 맞는 언어 사용 ) 

* 객체지향 개념 
  - 과거에는 구조적 개발 방법을 사용 
    - 소프트웨어를 단위 모듈로 분할하여 전체 프로그램의 구조응 세부적으로 쪼갠 후 각 부분을 구현하고 통합하여 완성하는 방법 
    - 구조도를 이용 ( tree ?? ) 
    - 함수를 사용하여 부분을 구현하고 main에서 병합하는 방법 
    
  - 객체지향 개발 방법 
    - 현실세계에 존재하는 실체 및 개념들을 객체라는 독립된 단위로 구성하고, 이 객체들이 메시지를 통하여 상호작용함으로써 전체 시스템이 운영되는 개념 
    - UML을 이용하여 설계 
    - class를 이용 하려 각 부분을 구현하고 class를 호출하여 구현 
  
* 구조적 패더다임 
  - 데이터와 함수들이 서로 독립적인 관계처럼 취급 
  - 프로그램 구성 단위가 함수 
  - 기본적으로 순차적으로 접근이 되는 방식 
  - 데이터와 그 데이터를 처리하는 방식이 분리 
  - 유지보수에 문제가 있다 
  
* 객체지향 패러다임 
  - 객체라는 개념을 통해 데이터와 그 데이터를 처리하는 방식을 통합 
  - 프로그램 구성 단위가 객체 
   
* 객체지향 모델링 
  - 정적설계와 동적설계로 구성  
  - 
  
